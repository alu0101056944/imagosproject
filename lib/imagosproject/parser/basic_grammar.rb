# Autogenerated from a Treetop grammar. Edits may be lost.


 # Test for keyword vs name difference

module MyGrammar
  include Treetop::Runtime

  def root
    @root ||= :root
  end

  module Root0
    def statement
      elements[1]
    end
  end

  module Root1
  end

  def _nt_root
    start_index = index
    if node_cache[:root].has_key?(index)
      cached = node_cache[:root][index]
      if cached
        node_cache[:root][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        r4 = _nt_statement
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
      if r3
        s5, i5 = [], index
        loop do
          i6, s6 = index, []
          s7, i7 = [], index
          loop do
            r8 = _nt_space
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          s6 << r7
          if r7
            r9 = _nt_statement
            s6 << r9
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(Root0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
        if r5
          s10, i10 = [], index
          loop do
            r11 = _nt_space
            if r11
              s10 << r11
            else
              break
            end
          end
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          s0 << r10
        end
      end
    end
    if s0.last
      r0 = instantiate_node(RootNode,input, i0...index, s0)
      r0.extend(Root1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:root][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if (match_len = has_terminal?("\n", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"\\n"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if (match_len = has_terminal?(" ", false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('" "')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          if (match_len = has_terminal?("\t", false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('"\\t"')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            if (match_len = has_terminal?("\r", false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('"\\r"')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              if (match_len = has_terminal?("\f", false, index))
                r6 = true
                @index += match_len
              else
                terminal_parse_failure('"\\f"')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                if (match_len = has_terminal?("\v", false, index))
                  r7 = true
                  @index += match_len
                else
                  terminal_parse_failure('"\\v"')
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SpaceNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        node_cache[:name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z]')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(NameLiteralNode,input, i0...index, s0)
    end

    node_cache[:name][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        node_cache[:number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("-", false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('"-"')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r4 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
      if r3
        i6, s6 = index, []
        if (match_len = has_terminal?(".", false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('"."')
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
              r9 = true
              @index += 1
            else
              terminal_parse_failure('[0-9]')
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          if s8.empty?
            @index = i8
            r8 = nil
          else
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          end
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Number0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(NumberNode,input, i0...index, s0)
      r0.extend(Number1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Statement0
  end

  module Statement1
  end

  module Statement2
  end

  module Statement3
  end

  module Statement4
    def name1
      elements[3]
    end

    def name2
      elements[9]
    end

  end

  module Statement5
  end

  module Statement6
    def name
      elements[4]
    end

  end

  module Statement7
  end

  module Statement8
  end

  module Statement9
  end

  module Statement10
    def name1
      elements[8]
    end

    def name2
      elements[12]
    end

    def name3
      elements[21]
    end

  end

  module Statement11
  end

  module Statement12
  end

  module Statement13
  end

  module Statement14
    def name
      elements[6]
    end

  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        node_cache[:statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?("DEFINE", false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"DEFINE"')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        i6, s6 = index, []
        i7 = index
        if (match_len = has_terminal?("A", false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('"A"')
          r8 = nil
        end
        if r8
          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
          r7 = r8
        else
          if (match_len = has_terminal?("AN", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"AN"')
            r9 = nil
          end
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r7 = r9
          else
            @index = i7
            r7 = nil
          end
        end
        s6 << r7
        if r7
          s10, i10 = [], index
          loop do
            r11 = _nt_space
            if r11
              s10 << r11
            else
              break
            end
          end
          if s10.empty?
            @index = i10
            r10 = nil
          else
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          end
          s6 << r10
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Statement0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r12 = _nt_name
          s1 << r12
          if r12
            s13, i13 = [], index
            loop do
              r14 = _nt_space
              if r14
                s13 << r14
              else
                break
              end
            end
            if s13.empty?
              @index = i13
              r13 = nil
            else
              r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            end
            s1 << r13
            if r13
              if (match_len = has_terminal?("ATLAS", false, index))
                r15 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"ATLAS"')
                r15 = nil
              end
              s1 << r15
              if r15
                s16, i16 = [], index
                loop do
                  r17 = _nt_space
                  if r17
                    s16 << r17
                  else
                    break
                  end
                end
                if s16.empty?
                  @index = i16
                  r16 = nil
                else
                  r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                end
                s1 << r16
                if r16
                  if (match_len = has_terminal?("NAMED", false, index))
                    r18 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"NAMED"')
                    r18 = nil
                  end
                  s1 << r18
                  if r18
                    s19, i19 = [], index
                    loop do
                      r20 = _nt_space
                      if r20
                        s19 << r20
                      else
                        break
                      end
                    end
                    if s19.empty?
                      @index = i19
                      r19 = nil
                    else
                      r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                    end
                    s1 << r19
                    if r19
                      r21 = _nt_name
                      s1 << r21
                      if r21
                        s22, i22 = [], index
                        loop do
                          r23 = _nt_space
                          if r23
                            s22 << r23
                          else
                            break
                          end
                        end
                        if s22.empty?
                          @index = i22
                          r22 = nil
                        else
                          r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                        end
                        s1 << r22
                        if r22
                          if (match_len = has_terminal?("WITH", false, index))
                            r24 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"WITH"')
                            r24 = nil
                          end
                          s1 << r24
                          if r24
                            s25, i25 = [], index
                            loop do
                              r26 = _nt_space
                              if r26
                                s25 << r26
                              else
                                break
                              end
                            end
                            if s25.empty?
                              @index = i25
                              r25 = nil
                            else
                              r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                            end
                            s1 << r25
                            if r25
                              i28, s28 = index, []
                              if (match_len = has_terminal?("THE", false, index))
                                r29 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('"THE"')
                                r29 = nil
                              end
                              s28 << r29
                              if r29
                                s30, i30 = [], index
                                loop do
                                  r31 = _nt_space
                                  if r31
                                    s30 << r31
                                  else
                                    break
                                  end
                                end
                                if s30.empty?
                                  @index = i30
                                  r30 = nil
                                else
                                  r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                end
                                s28 << r30
                              end
                              if s28.last
                                r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                                r28.extend(Statement1)
                              else
                                @index = i28
                                r28 = nil
                              end
                              if r28
                                r27 = r28
                              else
                                r27 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s1 << r27
                              if r27
                                i33, s33 = index, []
                                if (match_len = has_terminal?("FOLLOWING", false, index))
                                  r34 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('"FOLLOWING"')
                                  r34 = nil
                                end
                                s33 << r34
                                if r34
                                  s35, i35 = [], index
                                  loop do
                                    r36 = _nt_space
                                    if r36
                                      s35 << r36
                                    else
                                      break
                                    end
                                  end
                                  if s35.empty?
                                    @index = i35
                                    r35 = nil
                                  else
                                    r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                                  end
                                  s33 << r35
                                end
                                if s33.last
                                  r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                                  r33.extend(Statement2)
                                else
                                  @index = i33
                                  r33 = nil
                                end
                                if r33
                                  r32 = r33
                                else
                                  r32 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s1 << r32
                                if r32
                                  i38, s38 = index, []
                                  if (match_len = has_terminal?("RADIOGRAPHIES", false, index))
                                    r39 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                    @index += match_len
                                  else
                                    terminal_parse_failure('"RADIOGRAPHIES"')
                                    r39 = nil
                                  end
                                  s38 << r39
                                  if r39
                                    s40, i40 = [], index
                                    loop do
                                      r41 = _nt_space
                                      if r41
                                        s40 << r41
                                      else
                                        break
                                      end
                                    end
                                    if s40.empty?
                                      @index = i40
                                      r40 = nil
                                    else
                                      r40 = instantiate_node(SyntaxNode,input, i40...index, s40)
                                    end
                                    s38 << r40
                                  end
                                  if s38.last
                                    r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                                    r38.extend(Statement3)
                                  else
                                    @index = i38
                                    r38 = nil
                                  end
                                  if r38
                                    r37 = r38
                                  else
                                    r37 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s1 << r37
                                  if r37
                                    s42, i42 = [], index
                                    loop do
                                      r43 = _nt_atlasRadiographyDefinition
                                      if r43
                                        s42 << r43
                                      else
                                        break
                                      end
                                    end
                                    if s42.empty?
                                      @index = i42
                                      r42 = nil
                                    else
                                      r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                    end
                                    s1 << r42
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(DefineAtlasNode,input, i1...index, s1)
      r1.extend(Statement4)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i44, s44 = index, []
      if (match_len = has_terminal?("COMPARE", false, index))
        r45 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"COMPARE"')
        r45 = nil
      end
      s44 << r45
      if r45
        s46, i46 = [], index
        loop do
          r47 = _nt_space
          if r47
            s46 << r47
          else
            break
          end
        end
        if s46.empty?
          @index = i46
          r46 = nil
        else
          r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
        end
        s44 << r46
        if r46
          i49, s49 = index, []
          if (match_len = has_terminal?("THE", false, index))
            r50 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"THE"')
            r50 = nil
          end
          s49 << r50
          if r50
            s51, i51 = [], index
            loop do
              r52 = _nt_space
              if r52
                s51 << r52
              else
                break
              end
            end
            if s51.empty?
              @index = i51
              r51 = nil
            else
              r51 = instantiate_node(SyntaxNode,input, i51...index, s51)
            end
            s49 << r51
          end
          if s49.last
            r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
            r49.extend(Statement5)
          else
            @index = i49
            r49 = nil
          end
          if r49
            r48 = r49
          else
            r48 = instantiate_node(SyntaxNode,input, index...index)
          end
          s44 << r48
          if r48
            if (match_len = has_terminal?("RADIOGRAPHY", false, index))
              r53 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"RADIOGRAPHY"')
              r53 = nil
            end
            s44 << r53
            if r53
              s54, i54 = [], index
              loop do
                r55 = _nt_space
                if r55
                  s54 << r55
                else
                  break
                end
              end
              if s54.empty?
                @index = i54
                r54 = nil
              else
                r54 = instantiate_node(SyntaxNode,input, i54...index, s54)
              end
              s44 << r54
              if r54
                i57, s57 = index, []
                if (match_len = has_terminal?("OBSERVED", false, index))
                  r58 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('"OBSERVED"')
                  r58 = nil
                end
                s57 << r58
                if r58
                  s59, i59 = [], index
                  loop do
                    r60 = _nt_space
                    if r60
                      s59 << r60
                    else
                      break
                    end
                  end
                  if s59.empty?
                    @index = i59
                    r59 = nil
                  else
                    r59 = instantiate_node(SyntaxNode,input, i59...index, s59)
                  end
                  s57 << r59
                  if r59
                    if (match_len = has_terminal?("BY", false, index))
                      r61 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('"BY"')
                      r61 = nil
                    end
                    s57 << r61
                    if r61
                      s62, i62 = [], index
                      loop do
                        r63 = _nt_space
                        if r63
                          s62 << r63
                        else
                          break
                        end
                      end
                      if s62.empty?
                        @index = i62
                        r62 = nil
                      else
                        r62 = instantiate_node(SyntaxNode,input, i62...index, s62)
                      end
                      s57 << r62
                      if r62
                        r64 = _nt_name
                        s57 << r64
                        if r64
                          s65, i65 = [], index
                          loop do
                            r66 = _nt_space
                            if r66
                              s65 << r66
                            else
                              break
                            end
                          end
                          if s65.empty?
                            @index = i65
                            r65 = nil
                          else
                            r65 = instantiate_node(SyntaxNode,input, i65...index, s65)
                          end
                          s57 << r65
                        end
                      end
                    end
                  end
                end
                if s57.last
                  r57 = instantiate_node(SyntaxNode,input, i57...index, s57)
                  r57.extend(Statement6)
                else
                  @index = i57
                  r57 = nil
                end
                if r57
                  r56 = r57
                else
                  r56 = instantiate_node(SyntaxNode,input, index...index)
                end
                s44 << r56
                if r56
                  if (match_len = has_terminal?("USING", false, index))
                    r67 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"USING"')
                    r67 = nil
                  end
                  s44 << r67
                  if r67
                    s68, i68 = [], index
                    loop do
                      r69 = _nt_space
                      if r69
                        s68 << r69
                      else
                        break
                      end
                    end
                    if s68.empty?
                      @index = i68
                      r68 = nil
                    else
                      r68 = instantiate_node(SyntaxNode,input, i68...index, s68)
                    end
                    s44 << r68
                    if r68
                      r70 = _nt_name
                      s44 << r70
                      if r70
                        s71, i71 = [], index
                        loop do
                          r72 = _nt_space
                          if r72
                            s71 << r72
                          else
                            break
                          end
                        end
                        if s71.empty?
                          @index = i71
                          r71 = nil
                        else
                          r71 = instantiate_node(SyntaxNode,input, i71...index, s71)
                        end
                        s44 << r71
                        if r71
                          i74, s74 = index, []
                          if (match_len = has_terminal?("WITH", false, index))
                            r75 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"WITH"')
                            r75 = nil
                          end
                          s74 << r75
                          if r75
                            s76, i76 = [], index
                            loop do
                              r77 = _nt_space
                              if r77
                                s76 << r77
                              else
                                break
                              end
                            end
                            if s76.empty?
                              @index = i76
                              r76 = nil
                            else
                              r76 = instantiate_node(SyntaxNode,input, i76...index, s76)
                            end
                            s74 << r76
                          end
                          if s74.last
                            r74 = instantiate_node(SyntaxNode,input, i74...index, s74)
                            r74.extend(Statement7)
                          else
                            @index = i74
                            r74 = nil
                          end
                          if r74
                            r73 = r74
                          else
                            r73 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s44 << r73
                          if r73
                            i79, s79 = index, []
                            if (match_len = has_terminal?("THE", false, index))
                              r80 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('"THE"')
                              r80 = nil
                            end
                            s79 << r80
                            if r80
                              s81, i81 = [], index
                              loop do
                                r82 = _nt_space
                                if r82
                                  s81 << r82
                                else
                                  break
                                end
                              end
                              if s81.empty?
                                @index = i81
                                r81 = nil
                              else
                                r81 = instantiate_node(SyntaxNode,input, i81...index, s81)
                              end
                              s79 << r81
                            end
                            if s79.last
                              r79 = instantiate_node(SyntaxNode,input, i79...index, s79)
                              r79.extend(Statement8)
                            else
                              @index = i79
                              r79 = nil
                            end
                            if r79
                              r78 = r79
                            else
                              r78 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s44 << r78
                            if r78
                              r83 = _nt_name
                              s44 << r83
                              if r83
                                s84, i84 = [], index
                                loop do
                                  r85 = _nt_space
                                  if r85
                                    s84 << r85
                                  else
                                    break
                                  end
                                end
                                if s84.empty?
                                  @index = i84
                                  r84 = nil
                                else
                                  r84 = instantiate_node(SyntaxNode,input, i84...index, s84)
                                end
                                s44 << r84
                                if r84
                                  i87, s87 = index, []
                                  if (match_len = has_terminal?("ATLAS", false, index))
                                    r88 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                    @index += match_len
                                  else
                                    terminal_parse_failure('"ATLAS"')
                                    r88 = nil
                                  end
                                  s87 << r88
                                  if r88
                                    s89, i89 = [], index
                                    loop do
                                      r90 = _nt_space
                                      if r90
                                        s89 << r90
                                      else
                                        break
                                      end
                                    end
                                    if s89.empty?
                                      @index = i89
                                      r89 = nil
                                    else
                                      r89 = instantiate_node(SyntaxNode,input, i89...index, s89)
                                    end
                                    s87 << r89
                                  end
                                  if s87.last
                                    r87 = instantiate_node(SyntaxNode,input, i87...index, s87)
                                    r87.extend(Statement9)
                                  else
                                    @index = i87
                                    r87 = nil
                                  end
                                  if r87
                                    r86 = r87
                                  else
                                    r86 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s44 << r86
                                  if r86
                                    if (match_len = has_terminal?("STARTING", false, index))
                                      r91 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"STARTING"')
                                      r91 = nil
                                    end
                                    s44 << r91
                                    if r91
                                      s92, i92 = [], index
                                      loop do
                                        r93 = _nt_space
                                        if r93
                                          s92 << r93
                                        else
                                          break
                                        end
                                      end
                                      if s92.empty?
                                        @index = i92
                                        r92 = nil
                                      else
                                        r92 = instantiate_node(SyntaxNode,input, i92...index, s92)
                                      end
                                      s44 << r92
                                      if r92
                                        if (match_len = has_terminal?("WITH", false, index))
                                          r94 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                          @index += match_len
                                        else
                                          terminal_parse_failure('"WITH"')
                                          r94 = nil
                                        end
                                        s44 << r94
                                        if r94
                                          s95, i95 = [], index
                                          loop do
                                            r96 = _nt_space
                                            if r96
                                              s95 << r96
                                            else
                                              break
                                            end
                                          end
                                          if s95.empty?
                                            @index = i95
                                            r95 = nil
                                          else
                                            r95 = instantiate_node(SyntaxNode,input, i95...index, s95)
                                          end
                                          s44 << r95
                                          if r95
                                            if (match_len = has_terminal?("GENDER", false, index))
                                              r97 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                              @index += match_len
                                            else
                                              terminal_parse_failure('"GENDER"')
                                              r97 = nil
                                            end
                                            s44 << r97
                                            if r97
                                              s98, i98 = [], index
                                              loop do
                                                r99 = _nt_space
                                                if r99
                                                  s98 << r99
                                                else
                                                  break
                                                end
                                              end
                                              if s98.empty?
                                                @index = i98
                                                r98 = nil
                                              else
                                                r98 = instantiate_node(SyntaxNode,input, i98...index, s98)
                                              end
                                              s44 << r98
                                              if r98
                                                r100 = _nt_name
                                                s44 << r100
                                                if r100
                                                  s101, i101 = [], index
                                                  loop do
                                                    r102 = _nt_space
                                                    if r102
                                                      s101 << r102
                                                    else
                                                      break
                                                    end
                                                  end
                                                  if s101.empty?
                                                    @index = i101
                                                    r101 = nil
                                                  else
                                                    r101 = instantiate_node(SyntaxNode,input, i101...index, s101)
                                                  end
                                                  s44 << r101
                                                  if r101
                                                    if (match_len = has_terminal?("DEFINED", false, index))
                                                      r103 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                      @index += match_len
                                                    else
                                                      terminal_parse_failure('"DEFINED"')
                                                      r103 = nil
                                                    end
                                                    s44 << r103
                                                    if r103
                                                      s104, i104 = [], index
                                                      loop do
                                                        r105 = _nt_space
                                                        if r105
                                                          s104 << r105
                                                        else
                                                          break
                                                        end
                                                      end
                                                      if s104.empty?
                                                        @index = i104
                                                        r104 = nil
                                                      else
                                                        r104 = instantiate_node(SyntaxNode,input, i104...index, s104)
                                                      end
                                                      s44 << r104
                                                      if r104
                                                        if (match_len = has_terminal?("BY", false, index))
                                                          r106 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                          @index += match_len
                                                        else
                                                          terminal_parse_failure('"BY"')
                                                          r106 = nil
                                                        end
                                                        s44 << r106
                                                        if r106
                                                          s107, i107 = [], index
                                                          loop do
                                                            r108 = _nt_space
                                                            if r108
                                                              s107 << r108
                                                            else
                                                              break
                                                            end
                                                          end
                                                          if s107.empty?
                                                            @index = i107
                                                            r107 = nil
                                                          else
                                                            r107 = instantiate_node(SyntaxNode,input, i107...index, s107)
                                                          end
                                                          s44 << r107
                                                          if r107
                                                            s109, i109 = [], index
                                                            loop do
                                                              r110 = _nt_boneMeasurements
                                                              if r110
                                                                s109 << r110
                                                              else
                                                                break
                                                              end
                                                            end
                                                            if s109.empty?
                                                              @index = i109
                                                              r109 = nil
                                                            else
                                                              r109 = instantiate_node(SyntaxNode,input, i109...index, s109)
                                                            end
                                                            s44 << r109
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s44.last
        r44 = instantiate_node(CompareRadiographyNode,input, i44...index, s44)
        r44.extend(Statement10)
      else
        @index = i44
        r44 = nil
      end
      if r44
        r44 = SyntaxNode.new(input, (index-1)...index) if r44 == true
        r0 = r44
      else
        i111, s111 = index, []
        if (match_len = has_terminal?("LOAD", false, index))
          r112 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"LOAD"')
          r112 = nil
        end
        s111 << r112
        if r112
          s113, i113 = [], index
          loop do
            r114 = _nt_space
            if r114
              s113 << r114
            else
              break
            end
          end
          if s113.empty?
            @index = i113
            r113 = nil
          else
            r113 = instantiate_node(SyntaxNode,input, i113...index, s113)
          end
          s111 << r113
          if r113
            i116, s116 = index, []
            if (match_len = has_terminal?("THE", false, index))
              r117 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"THE"')
              r117 = nil
            end
            s116 << r117
            if r117
              s118, i118 = [], index
              loop do
                r119 = _nt_space
                if r119
                  s118 << r119
                else
                  break
                end
              end
              if s118.empty?
                @index = i118
                r118 = nil
              else
                r118 = instantiate_node(SyntaxNode,input, i118...index, s118)
              end
              s116 << r118
            end
            if s116.last
              r116 = instantiate_node(SyntaxNode,input, i116...index, s116)
              r116.extend(Statement11)
            else
              @index = i116
              r116 = nil
            end
            if r116
              r115 = r116
            else
              r115 = instantiate_node(SyntaxNode,input, index...index)
            end
            s111 << r115
            if r115
              i120 = index
              i121, s121 = index, []
              if (match_len = has_terminal?("ATLAS", false, index))
                r122 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"ATLAS"')
                r122 = nil
              end
              s121 << r122
              if r122
                s123, i123 = [], index
                loop do
                  r124 = _nt_space
                  if r124
                    s123 << r124
                  else
                    break
                  end
                end
                if s123.empty?
                  @index = i123
                  r123 = nil
                else
                  r123 = instantiate_node(SyntaxNode,input, i123...index, s123)
                end
                s121 << r123
              end
              if s121.last
                r121 = instantiate_node(SyntaxNode,input, i121...index, s121)
                r121.extend(Statement12)
              else
                @index = i121
                r121 = nil
              end
              if r121
                r121 = SyntaxNode.new(input, (index-1)...index) if r121 == true
                r120 = r121
              else
                i125, s125 = index, []
                if (match_len = has_terminal?("SCORING", false, index))
                  r126 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('"SCORING"')
                  r126 = nil
                end
                s125 << r126
                if r126
                  s127, i127 = [], index
                  loop do
                    r128 = _nt_space
                    if r128
                      s127 << r128
                    else
                      break
                    end
                  end
                  if s127.empty?
                    @index = i127
                    r127 = nil
                  else
                    r127 = instantiate_node(SyntaxNode,input, i127...index, s127)
                  end
                  s125 << r127
                  if r127
                    if (match_len = has_terminal?("SYSTEM", false, index))
                      r129 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('"SYSTEM"')
                      r129 = nil
                    end
                    s125 << r129
                  end
                end
                if s125.last
                  r125 = instantiate_node(SyntaxNode,input, i125...index, s125)
                  r125.extend(Statement13)
                else
                  @index = i125
                  r125 = nil
                end
                if r125
                  r125 = SyntaxNode.new(input, (index-1)...index) if r125 == true
                  r120 = r125
                else
                  @index = i120
                  r120 = nil
                end
              end
              s111 << r120
              if r120
                if (match_len = has_terminal?("NAMED", false, index))
                  r130 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('"NAMED"')
                  r130 = nil
                end
                s111 << r130
                if r130
                  s131, i131 = [], index
                  loop do
                    r132 = _nt_space
                    if r132
                      s131 << r132
                    else
                      break
                    end
                  end
                  if s131.empty?
                    @index = i131
                    r131 = nil
                  else
                    r131 = instantiate_node(SyntaxNode,input, i131...index, s131)
                  end
                  s111 << r131
                  if r131
                    r133 = _nt_name
                    s111 << r133
                    if r133
                      s134, i134 = [], index
                      loop do
                        r135 = _nt_space
                        if r135
                          s134 << r135
                        else
                          break
                        end
                      end
                      if s134.empty?
                        @index = i134
                        r134 = nil
                      else
                        r134 = instantiate_node(SyntaxNode,input, i134...index, s134)
                      end
                      s111 << r134
                    end
                  end
                end
              end
            end
          end
        end
        if s111.last
          r111 = instantiate_node(LoadNode,input, i111...index, s111)
          r111.extend(Statement14)
        else
          @index = i111
          r111 = nil
        end
        if r111
          r111 = SyntaxNode.new(input, (index-1)...index) if r111 == true
          r0 = r111
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module AtlasRadiographyDefinition0
    def binSelection
      elements[0]
    end

  end

  def _nt_atlasRadiographyDefinition
    start_index = index
    if node_cache[:atlasRadiographyDefinition].has_key?(index)
      cached = node_cache[:atlasRadiographyDefinition][index]
      if cached
        node_cache[:atlasRadiographyDefinition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_binSelection
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          r5 = _nt_boneMeasurements
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(AtlasRadiographyDefinitionNode,input, i0...index, s0)
      r0.extend(AtlasRadiographyDefinition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:atlasRadiographyDefinition][start_index] = r0

    r0
  end

  module BinSelection0
  end

  module BinSelection1
    def name
      elements[5]
    end

    def number
      elements[9]
    end

  end

  def _nt_binSelection
    start_index = index
    if node_cache[:binSelection].has_key?(index)
      cached = node_cache[:binSelection][index]
      if cached
        node_cache[:binSelection][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    if (match_len = has_terminal?("ONE", false, index))
      r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"ONE"')
      r3 = nil
    end
    s2 << r3
    if r3
      s4, i4 = [], index
      loop do
        r5 = _nt_space
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(BinSelection0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?("FOR", false, index))
        r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"FOR"')
        r6 = nil
      end
      s0 << r6
      if r6
        s7, i7 = [], index
        loop do
          r8 = _nt_space
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s0 << r7
        if r7
          if (match_len = has_terminal?("GENDER", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"GENDER"')
            r9 = nil
          end
          s0 << r9
          if r9
            s10, i10 = [], index
            loop do
              r11 = _nt_space
              if r11
                s10 << r11
              else
                break
              end
            end
            if s10.empty?
              @index = i10
              r10 = nil
            else
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            end
            s0 << r10
            if r10
              r12 = _nt_name
              s0 << r12
              if r12
                s13, i13 = [], index
                loop do
                  r14 = _nt_space
                  if r14
                    s13 << r14
                  else
                    break
                  end
                end
                if s13.empty?
                  @index = i13
                  r13 = nil
                else
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                end
                s0 << r13
                if r13
                  if (match_len = has_terminal?("AGE", false, index))
                    r15 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"AGE"')
                    r15 = nil
                  end
                  s0 << r15
                  if r15
                    s16, i16 = [], index
                    loop do
                      r17 = _nt_space
                      if r17
                        s16 << r17
                      else
                        break
                      end
                    end
                    if s16.empty?
                      @index = i16
                      r16 = nil
                    else
                      r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                    end
                    s0 << r16
                    if r16
                      r18 = _nt_number
                      s0 << r18
                      if r18
                        s19, i19 = [], index
                        loop do
                          r20 = _nt_space
                          if r20
                            s19 << r20
                          else
                            break
                          end
                        end
                        if s19.empty?
                          @index = i19
                          r19 = nil
                        else
                          r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                        end
                        s0 << r19
                        if r19
                          if (match_len = has_terminal?("WITH", false, index))
                            r21 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"WITH"')
                            r21 = nil
                          end
                          s0 << r21
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BinSelectionNode,input, i0...index, s0)
      r0.extend(BinSelection1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:binSelection][start_index] = r0

    r0
  end

  module BoneMeasurements0
  end

  module BoneMeasurements1
  end

  module BoneMeasurements2
    def measurement
      elements[0]
    end

  end

  module BoneMeasurements3
    def name
      elements[1]
    end

  end

  def _nt_boneMeasurements
    start_index = index
    if node_cache[:boneMeasurements].has_key?(index)
      cached = node_cache[:boneMeasurements][index]
      if cached
        node_cache[:boneMeasurements][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    i3, s3 = index, []
    if (match_len = has_terminal?("A", false, index))
      r4 = true
      @index += match_len
    else
      terminal_parse_failure('"A"')
      r4 = nil
    end
    s3 << r4
    if r4
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(BoneMeasurements0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      i7, s7 = index, []
      if (match_len = has_terminal?("AN", false, index))
        r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"AN"')
        r8 = nil
      end
      s7 << r8
      if r8
        s9, i9 = [], index
        loop do
          r10 = _nt_space
          if r10
            s9 << r10
          else
            break
          end
        end
        if s9.empty?
          @index = i9
          r9 = nil
        else
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        end
        s7 << r9
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(BoneMeasurements1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
        r2 = r7
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r11 = _nt_name
      s0 << r11
      if r11
        s12, i12 = [], index
        loop do
          r13 = _nt_space
          if r13
            s12 << r13
          else
            break
          end
        end
        if s12.empty?
          @index = i12
          r12 = nil
        else
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
        end
        s0 << r12
        if r12
          if (match_len = has_terminal?("BONE", false, index))
            r14 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"BONE"')
            r14 = nil
          end
          s0 << r14
          if r14
            s15, i15 = [], index
            loop do
              r16 = _nt_space
              if r16
                s15 << r16
              else
                break
              end
            end
            if s15.empty?
              @index = i15
              r15 = nil
            else
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
            end
            s0 << r15
            if r15
              if (match_len = has_terminal?("OF", false, index))
                r17 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"OF"')
                r17 = nil
              end
              s0 << r17
              if r17
                s18, i18 = [], index
                loop do
                  r19 = _nt_space
                  if r19
                    s18 << r19
                  else
                    break
                  end
                end
                if s18.empty?
                  @index = i18
                  r18 = nil
                else
                  r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                end
                s0 << r18
                if r18
                  if (match_len = has_terminal?("MEASUREMENTS", false, index))
                    r20 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"MEASUREMENTS"')
                    r20 = nil
                  end
                  s0 << r20
                  if r20
                    s21, i21 = [], index
                    loop do
                      r22 = _nt_space
                      if r22
                        s21 << r22
                      else
                        break
                      end
                    end
                    if s21.empty?
                      @index = i21
                      r21 = nil
                    else
                      r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                    end
                    s0 << r21
                    if r21
                      s23, i23 = [], index
                      loop do
                        i24, s24 = index, []
                        r25 = _nt_measurement
                        s24 << r25
                        if r25
                          s26, i26 = [], index
                          loop do
                            r27 = _nt_space
                            if r27
                              s26 << r27
                            else
                              break
                            end
                          end
                          if s26.empty?
                            @index = i26
                            r26 = nil
                          else
                            r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                          end
                          s24 << r26
                        end
                        if s24.last
                          r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                          r24.extend(BoneMeasurements2)
                        else
                          @index = i24
                          r24 = nil
                        end
                        if r24
                          s23 << r24
                        else
                          break
                        end
                      end
                      if s23.empty?
                        @index = i23
                        r23 = nil
                      else
                        r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                      end
                      s0 << r23
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BoneMeasurementsNode,input, i0...index, s0)
      r0.extend(BoneMeasurements3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boneMeasurements][start_index] = r0

    r0
  end

  module Measurement0
    def name
      elements[0]
    end

    def number
      elements[4]
    end
  end

  def _nt_measurement
    start_index = index
    if node_cache[:measurement].has_key?(index)
      cached = node_cache[:measurement][index]
      if cached
        node_cache[:measurement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if (match_len = has_terminal?("=", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"="')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            r7 = _nt_number
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MeasurementNode,input, i0...index, s0)
      r0.extend(Measurement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:measurement][start_index] = r0

    r0
  end

end

class MyGrammarParser < Treetop::Runtime::CompiledParser
  include MyGrammar
end

