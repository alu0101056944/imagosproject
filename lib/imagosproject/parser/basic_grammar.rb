# Autogenerated from a Treetop grammar. Edits may be lost.


 # Test for keyword vs name difference

module MyGrammar
  include Treetop::Runtime

  def root
    @root ||= :root
  end

  module Root0
    def statement
      elements[1]
    end
  end

  module Root1
  end

  def _nt_root
    start_index = index
    if node_cache[:root].has_key?(index)
      cached = node_cache[:root][index]
      if cached
        node_cache[:root][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        r4 = _nt_statement
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
      if r3
        s5, i5 = [], index
        loop do
          i6, s6 = index, []
          s7, i7 = [], index
          loop do
            r8 = _nt_space
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          s6 << r7
          if r7
            r9 = _nt_statement
            s6 << r9
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(Root0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
        if r5
          s10, i10 = [], index
          loop do
            r11 = _nt_space
            if r11
              s10 << r11
            else
              break
            end
          end
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          s0 << r10
        end
      end
    end
    if s0.last
      r0 = instantiate_node(RootNode,input, i0...index, s0)
      r0.extend(Root1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:root][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if (match_len = has_terminal?("\n", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"\\n"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if (match_len = has_terminal?(" ", false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('" "')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          if (match_len = has_terminal?("\t", false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('"\\t"')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            if (match_len = has_terminal?("\r", false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('"\\r"')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              if (match_len = has_terminal?("\f", false, index))
                r6 = true
                @index += match_len
              else
                terminal_parse_failure('"\\f"')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                if (match_len = has_terminal?("\v", false, index))
                  r7 = true
                  @index += match_len
                else
                  terminal_parse_failure('"\\v"')
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SpaceNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        node_cache[:name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z]')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(NameLiteralNode,input, i0...index, s0)
    end

    node_cache[:name][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        node_cache[:number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("-", false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('"-"')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r4 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
      if r3
        i6, s6 = index, []
        if (match_len = has_terminal?(".", false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('"."')
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
              r9 = true
              @index += 1
            else
              terminal_parse_failure('[0-9]')
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          if s8.empty?
            @index = i8
            r8 = nil
          else
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          end
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Number0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(NumberNode,input, i0...index, s0)
      r0.extend(Number1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Statement0
  end

  module Statement1
  end

  module Statement2
  end

  module Statement3
  end

  module Statement4
    def name1
      elements[3]
    end

    def name2
      elements[9]
    end

  end

  module Statement5
  end

  module Statement6
    def name
      elements[4]
    end

  end

  module Statement7
  end

  module Statement8
  end

  module Statement9
  end

  module Statement10
    def name1
      elements[8]
    end

    def name2
      elements[11]
    end

    def name3
      elements[19]
    end

    def boneMeasurements
      elements[25]
    end

  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        node_cache[:statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?("DEFINE", false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"DEFINE"')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        i6, s6 = index, []
        i7 = index
        if (match_len = has_terminal?("A", false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('"A"')
          r8 = nil
        end
        if r8
          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
          r7 = r8
        else
          if (match_len = has_terminal?("AN", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"AN"')
            r9 = nil
          end
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r7 = r9
          else
            @index = i7
            r7 = nil
          end
        end
        s6 << r7
        if r7
          s10, i10 = [], index
          loop do
            r11 = _nt_space
            if r11
              s10 << r11
            else
              break
            end
          end
          if s10.empty?
            @index = i10
            r10 = nil
          else
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          end
          s6 << r10
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Statement0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r12 = _nt_name
          s1 << r12
          if r12
            s13, i13 = [], index
            loop do
              r14 = _nt_space
              if r14
                s13 << r14
              else
                break
              end
            end
            if s13.empty?
              @index = i13
              r13 = nil
            else
              r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            end
            s1 << r13
            if r13
              if (match_len = has_terminal?("ATLAS", false, index))
                r15 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"ATLAS"')
                r15 = nil
              end
              s1 << r15
              if r15
                s16, i16 = [], index
                loop do
                  r17 = _nt_space
                  if r17
                    s16 << r17
                  else
                    break
                  end
                end
                if s16.empty?
                  @index = i16
                  r16 = nil
                else
                  r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                end
                s1 << r16
                if r16
                  if (match_len = has_terminal?("NAMED", false, index))
                    r18 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"NAMED"')
                    r18 = nil
                  end
                  s1 << r18
                  if r18
                    s19, i19 = [], index
                    loop do
                      r20 = _nt_space
                      if r20
                        s19 << r20
                      else
                        break
                      end
                    end
                    if s19.empty?
                      @index = i19
                      r19 = nil
                    else
                      r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                    end
                    s1 << r19
                    if r19
                      r21 = _nt_name
                      s1 << r21
                      if r21
                        s22, i22 = [], index
                        loop do
                          r23 = _nt_space
                          if r23
                            s22 << r23
                          else
                            break
                          end
                        end
                        if s22.empty?
                          @index = i22
                          r22 = nil
                        else
                          r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                        end
                        s1 << r22
                        if r22
                          if (match_len = has_terminal?("WITH", false, index))
                            r24 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"WITH"')
                            r24 = nil
                          end
                          s1 << r24
                          if r24
                            s25, i25 = [], index
                            loop do
                              r26 = _nt_space
                              if r26
                                s25 << r26
                              else
                                break
                              end
                            end
                            if s25.empty?
                              @index = i25
                              r25 = nil
                            else
                              r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                            end
                            s1 << r25
                            if r25
                              i28, s28 = index, []
                              if (match_len = has_terminal?("THE", false, index))
                                r29 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('"THE"')
                                r29 = nil
                              end
                              s28 << r29
                              if r29
                                s30, i30 = [], index
                                loop do
                                  r31 = _nt_space
                                  if r31
                                    s30 << r31
                                  else
                                    break
                                  end
                                end
                                if s30.empty?
                                  @index = i30
                                  r30 = nil
                                else
                                  r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                end
                                s28 << r30
                              end
                              if s28.last
                                r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                                r28.extend(Statement1)
                              else
                                @index = i28
                                r28 = nil
                              end
                              if r28
                                r27 = r28
                              else
                                r27 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s1 << r27
                              if r27
                                i33, s33 = index, []
                                if (match_len = has_terminal?("FOLLOWING", false, index))
                                  r34 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('"FOLLOWING"')
                                  r34 = nil
                                end
                                s33 << r34
                                if r34
                                  s35, i35 = [], index
                                  loop do
                                    r36 = _nt_space
                                    if r36
                                      s35 << r36
                                    else
                                      break
                                    end
                                  end
                                  if s35.empty?
                                    @index = i35
                                    r35 = nil
                                  else
                                    r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                                  end
                                  s33 << r35
                                end
                                if s33.last
                                  r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                                  r33.extend(Statement2)
                                else
                                  @index = i33
                                  r33 = nil
                                end
                                if r33
                                  r32 = r33
                                else
                                  r32 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s1 << r32
                                if r32
                                  i38, s38 = index, []
                                  if (match_len = has_terminal?("RADIOGRAPHIES", false, index))
                                    r39 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                    @index += match_len
                                  else
                                    terminal_parse_failure('"RADIOGRAPHIES"')
                                    r39 = nil
                                  end
                                  s38 << r39
                                  if r39
                                    s40, i40 = [], index
                                    loop do
                                      r41 = _nt_space
                                      if r41
                                        s40 << r41
                                      else
                                        break
                                      end
                                    end
                                    if s40.empty?
                                      @index = i40
                                      r40 = nil
                                    else
                                      r40 = instantiate_node(SyntaxNode,input, i40...index, s40)
                                    end
                                    s38 << r40
                                  end
                                  if s38.last
                                    r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                                    r38.extend(Statement3)
                                  else
                                    @index = i38
                                    r38 = nil
                                  end
                                  if r38
                                    r37 = r38
                                  else
                                    r37 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s1 << r37
                                  if r37
                                    s42, i42 = [], index
                                    loop do
                                      r43 = _nt_atlasRadiographyDefinition
                                      if r43
                                        s42 << r43
                                      else
                                        break
                                      end
                                    end
                                    if s42.empty?
                                      @index = i42
                                      r42 = nil
                                    else
                                      r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                    end
                                    s1 << r42
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(DefineAtlasNode,input, i1...index, s1)
      r1.extend(Statement4)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i44, s44 = index, []
      if (match_len = has_terminal?("COMPARE", false, index))
        r45 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"COMPARE"')
        r45 = nil
      end
      s44 << r45
      if r45
        s46, i46 = [], index
        loop do
          r47 = _nt_space
          if r47
            s46 << r47
          else
            break
          end
        end
        if s46.empty?
          @index = i46
          r46 = nil
        else
          r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
        end
        s44 << r46
        if r46
          i49, s49 = index, []
          if (match_len = has_terminal?("THE", false, index))
            r50 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"THE"')
            r50 = nil
          end
          s49 << r50
          if r50
            s51, i51 = [], index
            loop do
              r52 = _nt_space
              if r52
                s51 << r52
              else
                break
              end
            end
            if s51.empty?
              @index = i51
              r51 = nil
            else
              r51 = instantiate_node(SyntaxNode,input, i51...index, s51)
            end
            s49 << r51
          end
          if s49.last
            r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
            r49.extend(Statement5)
          else
            @index = i49
            r49 = nil
          end
          if r49
            r48 = r49
          else
            r48 = instantiate_node(SyntaxNode,input, index...index)
          end
          s44 << r48
          if r48
            if (match_len = has_terminal?("RADIOGRAPHY", false, index))
              r53 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"RADIOGRAPHY"')
              r53 = nil
            end
            s44 << r53
            if r53
              s54, i54 = [], index
              loop do
                r55 = _nt_space
                if r55
                  s54 << r55
                else
                  break
                end
              end
              if s54.empty?
                @index = i54
                r54 = nil
              else
                r54 = instantiate_node(SyntaxNode,input, i54...index, s54)
              end
              s44 << r54
              if r54
                i57, s57 = index, []
                if (match_len = has_terminal?("OBSERVED", false, index))
                  r58 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('"OBSERVED"')
                  r58 = nil
                end
                s57 << r58
                if r58
                  s59, i59 = [], index
                  loop do
                    r60 = _nt_space
                    if r60
                      s59 << r60
                    else
                      break
                    end
                  end
                  if s59.empty?
                    @index = i59
                    r59 = nil
                  else
                    r59 = instantiate_node(SyntaxNode,input, i59...index, s59)
                  end
                  s57 << r59
                  if r59
                    if (match_len = has_terminal?("BY", false, index))
                      r61 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('"BY"')
                      r61 = nil
                    end
                    s57 << r61
                    if r61
                      s62, i62 = [], index
                      loop do
                        r63 = _nt_space
                        if r63
                          s62 << r63
                        else
                          break
                        end
                      end
                      if s62.empty?
                        @index = i62
                        r62 = nil
                      else
                        r62 = instantiate_node(SyntaxNode,input, i62...index, s62)
                      end
                      s57 << r62
                      if r62
                        r64 = _nt_name
                        s57 << r64
                        if r64
                          s65, i65 = [], index
                          loop do
                            r66 = _nt_space
                            if r66
                              s65 << r66
                            else
                              break
                            end
                          end
                          if s65.empty?
                            @index = i65
                            r65 = nil
                          else
                            r65 = instantiate_node(SyntaxNode,input, i65...index, s65)
                          end
                          s57 << r65
                        end
                      end
                    end
                  end
                end
                if s57.last
                  r57 = instantiate_node(SyntaxNode,input, i57...index, s57)
                  r57.extend(Statement6)
                else
                  @index = i57
                  r57 = nil
                end
                if r57
                  r56 = r57
                else
                  r56 = instantiate_node(SyntaxNode,input, index...index)
                end
                s44 << r56
                if r56
                  if (match_len = has_terminal?("USING", false, index))
                    r67 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"USING"')
                    r67 = nil
                  end
                  s44 << r67
                  if r67
                    s68, i68 = [], index
                    loop do
                      r69 = _nt_space
                      if r69
                        s68 << r69
                      else
                        break
                      end
                    end
                    if s68.empty?
                      @index = i68
                      r68 = nil
                    else
                      r68 = instantiate_node(SyntaxNode,input, i68...index, s68)
                    end
                    s44 << r68
                    if r68
                      r70 = _nt_name
                      s44 << r70
                      if r70
                        i72, s72 = index, []
                        if (match_len = has_terminal?("WITH", false, index))
                          r73 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('"WITH"')
                          r73 = nil
                        end
                        s72 << r73
                        if r73
                          s74, i74 = [], index
                          loop do
                            r75 = _nt_space
                            if r75
                              s74 << r75
                            else
                              break
                            end
                          end
                          if s74.empty?
                            @index = i74
                            r74 = nil
                          else
                            r74 = instantiate_node(SyntaxNode,input, i74...index, s74)
                          end
                          s72 << r74
                        end
                        if s72.last
                          r72 = instantiate_node(SyntaxNode,input, i72...index, s72)
                          r72.extend(Statement7)
                        else
                          @index = i72
                          r72 = nil
                        end
                        if r72
                          r71 = r72
                        else
                          r71 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s44 << r71
                        if r71
                          i77, s77 = index, []
                          if (match_len = has_terminal?("THE", false, index))
                            r78 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"THE"')
                            r78 = nil
                          end
                          s77 << r78
                          if r78
                            s79, i79 = [], index
                            loop do
                              r80 = _nt_space
                              if r80
                                s79 << r80
                              else
                                break
                              end
                            end
                            if s79.empty?
                              @index = i79
                              r79 = nil
                            else
                              r79 = instantiate_node(SyntaxNode,input, i79...index, s79)
                            end
                            s77 << r79
                          end
                          if s77.last
                            r77 = instantiate_node(SyntaxNode,input, i77...index, s77)
                            r77.extend(Statement8)
                          else
                            @index = i77
                            r77 = nil
                          end
                          if r77
                            r76 = r77
                          else
                            r76 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s44 << r76
                          if r76
                            r81 = _nt_name
                            s44 << r81
                            if r81
                              i83, s83 = index, []
                              if (match_len = has_terminal?("ATLAS", false, index))
                                r84 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('"ATLAS"')
                                r84 = nil
                              end
                              s83 << r84
                              if r84
                                s85, i85 = [], index
                                loop do
                                  r86 = _nt_space
                                  if r86
                                    s85 << r86
                                  else
                                    break
                                  end
                                end
                                if s85.empty?
                                  @index = i85
                                  r85 = nil
                                else
                                  r85 = instantiate_node(SyntaxNode,input, i85...index, s85)
                                end
                                s83 << r85
                              end
                              if s83.last
                                r83 = instantiate_node(SyntaxNode,input, i83...index, s83)
                                r83.extend(Statement9)
                              else
                                @index = i83
                                r83 = nil
                              end
                              if r83
                                r82 = r83
                              else
                                r82 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s44 << r82
                              if r82
                                if (match_len = has_terminal?("STARTING", false, index))
                                  r87 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('"STARTING"')
                                  r87 = nil
                                end
                                s44 << r87
                                if r87
                                  s88, i88 = [], index
                                  loop do
                                    r89 = _nt_space
                                    if r89
                                      s88 << r89
                                    else
                                      break
                                    end
                                  end
                                  if s88.empty?
                                    @index = i88
                                    r88 = nil
                                  else
                                    r88 = instantiate_node(SyntaxNode,input, i88...index, s88)
                                  end
                                  s44 << r88
                                  if r88
                                    if (match_len = has_terminal?("WITH", false, index))
                                      r90 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"WITH"')
                                      r90 = nil
                                    end
                                    s44 << r90
                                    if r90
                                      s91, i91 = [], index
                                      loop do
                                        r92 = _nt_space
                                        if r92
                                          s91 << r92
                                        else
                                          break
                                        end
                                      end
                                      if s91.empty?
                                        @index = i91
                                        r91 = nil
                                      else
                                        r91 = instantiate_node(SyntaxNode,input, i91...index, s91)
                                      end
                                      s44 << r91
                                      if r91
                                        if (match_len = has_terminal?("GENDER", false, index))
                                          r93 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                          @index += match_len
                                        else
                                          terminal_parse_failure('"GENDER"')
                                          r93 = nil
                                        end
                                        s44 << r93
                                        if r93
                                          s94, i94 = [], index
                                          loop do
                                            r95 = _nt_space
                                            if r95
                                              s94 << r95
                                            else
                                              break
                                            end
                                          end
                                          if s94.empty?
                                            @index = i94
                                            r94 = nil
                                          else
                                            r94 = instantiate_node(SyntaxNode,input, i94...index, s94)
                                          end
                                          s44 << r94
                                          if r94
                                            r96 = _nt_name
                                            s44 << r96
                                            if r96
                                              s97, i97 = [], index
                                              loop do
                                                r98 = _nt_space
                                                if r98
                                                  s97 << r98
                                                else
                                                  break
                                                end
                                              end
                                              if s97.empty?
                                                @index = i97
                                                r97 = nil
                                              else
                                                r97 = instantiate_node(SyntaxNode,input, i97...index, s97)
                                              end
                                              s44 << r97
                                              if r97
                                                if (match_len = has_terminal?("DEFINED", false, index))
                                                  r99 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                  @index += match_len
                                                else
                                                  terminal_parse_failure('"DEFINED"')
                                                  r99 = nil
                                                end
                                                s44 << r99
                                                if r99
                                                  s100, i100 = [], index
                                                  loop do
                                                    r101 = _nt_space
                                                    if r101
                                                      s100 << r101
                                                    else
                                                      break
                                                    end
                                                  end
                                                  if s100.empty?
                                                    @index = i100
                                                    r100 = nil
                                                  else
                                                    r100 = instantiate_node(SyntaxNode,input, i100...index, s100)
                                                  end
                                                  s44 << r100
                                                  if r100
                                                    if (match_len = has_terminal?("BY", false, index))
                                                      r102 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                      @index += match_len
                                                    else
                                                      terminal_parse_failure('"BY"')
                                                      r102 = nil
                                                    end
                                                    s44 << r102
                                                    if r102
                                                      s103, i103 = [], index
                                                      loop do
                                                        r104 = _nt_space
                                                        if r104
                                                          s103 << r104
                                                        else
                                                          break
                                                        end
                                                      end
                                                      if s103.empty?
                                                        @index = i103
                                                        r103 = nil
                                                      else
                                                        r103 = instantiate_node(SyntaxNode,input, i103...index, s103)
                                                      end
                                                      s44 << r103
                                                      if r103
                                                        r105 = _nt_boneMeasurements
                                                        s44 << r105
                                                        if r105
                                                          s106, i106 = [], index
                                                          loop do
                                                            r107 = _nt_space
                                                            if r107
                                                              s106 << r107
                                                            else
                                                              break
                                                            end
                                                          end
                                                          if s106.empty?
                                                            @index = i106
                                                            r106 = nil
                                                          else
                                                            r106 = instantiate_node(SyntaxNode,input, i106...index, s106)
                                                          end
                                                          s44 << r106
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s44.last
        r44 = instantiate_node(CompareRadiographyNode,input, i44...index, s44)
        r44.extend(Statement10)
      else
        @index = i44
        r44 = nil
      end
      if r44
        r44 = SyntaxNode.new(input, (index-1)...index) if r44 == true
        r0 = r44
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module AtlasRadiographyDefinition0
    def binSelection
      elements[0]
    end

  end

  def _nt_atlasRadiographyDefinition
    start_index = index
    if node_cache[:atlasRadiographyDefinition].has_key?(index)
      cached = node_cache[:atlasRadiographyDefinition][index]
      if cached
        node_cache[:atlasRadiographyDefinition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_binSelection
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          r5 = _nt_boneMeasurements
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(AtlasRadiographyDefinitionNode,input, i0...index, s0)
      r0.extend(AtlasRadiographyDefinition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:atlasRadiographyDefinition][start_index] = r0

    r0
  end

  module BinSelection0
  end

  module BinSelection1
    def name
      elements[5]
    end

    def number
      elements[9]
    end

  end

  def _nt_binSelection
    start_index = index
    if node_cache[:binSelection].has_key?(index)
      cached = node_cache[:binSelection][index]
      if cached
        node_cache[:binSelection][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    if (match_len = has_terminal?("ONE", false, index))
      r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"ONE"')
      r3 = nil
    end
    s2 << r3
    if r3
      s4, i4 = [], index
      loop do
        r5 = _nt_space
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(BinSelection0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?("FOR", false, index))
        r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"FOR"')
        r6 = nil
      end
      s0 << r6
      if r6
        s7, i7 = [], index
        loop do
          r8 = _nt_space
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s0 << r7
        if r7
          if (match_len = has_terminal?("GENDER", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"GENDER"')
            r9 = nil
          end
          s0 << r9
          if r9
            s10, i10 = [], index
            loop do
              r11 = _nt_space
              if r11
                s10 << r11
              else
                break
              end
            end
            if s10.empty?
              @index = i10
              r10 = nil
            else
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            end
            s0 << r10
            if r10
              r12 = _nt_name
              s0 << r12
              if r12
                s13, i13 = [], index
                loop do
                  r14 = _nt_space
                  if r14
                    s13 << r14
                  else
                    break
                  end
                end
                if s13.empty?
                  @index = i13
                  r13 = nil
                else
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                end
                s0 << r13
                if r13
                  if (match_len = has_terminal?("AGE", false, index))
                    r15 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"AGE"')
                    r15 = nil
                  end
                  s0 << r15
                  if r15
                    s16, i16 = [], index
                    loop do
                      r17 = _nt_space
                      if r17
                        s16 << r17
                      else
                        break
                      end
                    end
                    if s16.empty?
                      @index = i16
                      r16 = nil
                    else
                      r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                    end
                    s0 << r16
                    if r16
                      r18 = _nt_number
                      s0 << r18
                      if r18
                        s19, i19 = [], index
                        loop do
                          r20 = _nt_space
                          if r20
                            s19 << r20
                          else
                            break
                          end
                        end
                        if s19.empty?
                          @index = i19
                          r19 = nil
                        else
                          r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                        end
                        s0 << r19
                        if r19
                          if (match_len = has_terminal?("WITH", false, index))
                            r21 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"WITH"')
                            r21 = nil
                          end
                          s0 << r21
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BinSelectionNode,input, i0...index, s0)
      r0.extend(BinSelection1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:binSelection][start_index] = r0

    r0
  end

  module BoneMeasurements0
  end

  module BoneMeasurements1
  end

  module BoneMeasurements2
    def measurement
      elements[0]
    end

  end

  module BoneMeasurements3
    def name
      elements[1]
    end

  end

  def _nt_boneMeasurements
    start_index = index
    if node_cache[:boneMeasurements].has_key?(index)
      cached = node_cache[:boneMeasurements][index]
      if cached
        node_cache[:boneMeasurements][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    i3, s3 = index, []
    if (match_len = has_terminal?("A", false, index))
      r4 = true
      @index += match_len
    else
      terminal_parse_failure('"A"')
      r4 = nil
    end
    s3 << r4
    if r4
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(BoneMeasurements0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      i7, s7 = index, []
      if (match_len = has_terminal?("AN", false, index))
        r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"AN"')
        r8 = nil
      end
      s7 << r8
      if r8
        s9, i9 = [], index
        loop do
          r10 = _nt_space
          if r10
            s9 << r10
          else
            break
          end
        end
        if s9.empty?
          @index = i9
          r9 = nil
        else
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        end
        s7 << r9
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(BoneMeasurements1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
        r2 = r7
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r11 = _nt_name
      s0 << r11
      if r11
        s12, i12 = [], index
        loop do
          r13 = _nt_space
          if r13
            s12 << r13
          else
            break
          end
        end
        if s12.empty?
          @index = i12
          r12 = nil
        else
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
        end
        s0 << r12
        if r12
          if (match_len = has_terminal?("BONE", false, index))
            r14 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"BONE"')
            r14 = nil
          end
          s0 << r14
          if r14
            s15, i15 = [], index
            loop do
              r16 = _nt_space
              if r16
                s15 << r16
              else
                break
              end
            end
            if s15.empty?
              @index = i15
              r15 = nil
            else
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
            end
            s0 << r15
            if r15
              if (match_len = has_terminal?("OF", false, index))
                r17 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"OF"')
                r17 = nil
              end
              s0 << r17
              if r17
                s18, i18 = [], index
                loop do
                  r19 = _nt_space
                  if r19
                    s18 << r19
                  else
                    break
                  end
                end
                if s18.empty?
                  @index = i18
                  r18 = nil
                else
                  r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                end
                s0 << r18
                if r18
                  if (match_len = has_terminal?("MEASUREMENTS", false, index))
                    r20 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"MEASUREMENTS"')
                    r20 = nil
                  end
                  s0 << r20
                  if r20
                    s21, i21 = [], index
                    loop do
                      r22 = _nt_space
                      if r22
                        s21 << r22
                      else
                        break
                      end
                    end
                    if s21.empty?
                      @index = i21
                      r21 = nil
                    else
                      r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                    end
                    s0 << r21
                    if r21
                      s23, i23 = [], index
                      loop do
                        i24, s24 = index, []
                        r25 = _nt_measurement
                        s24 << r25
                        if r25
                          s26, i26 = [], index
                          loop do
                            r27 = _nt_space
                            if r27
                              s26 << r27
                            else
                              break
                            end
                          end
                          if s26.empty?
                            @index = i26
                            r26 = nil
                          else
                            r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                          end
                          s24 << r26
                        end
                        if s24.last
                          r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                          r24.extend(BoneMeasurements2)
                        else
                          @index = i24
                          r24 = nil
                        end
                        if r24
                          s23 << r24
                        else
                          break
                        end
                      end
                      if s23.empty?
                        @index = i23
                        r23 = nil
                      else
                        r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                      end
                      s0 << r23
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BoneMeasurementsNode,input, i0...index, s0)
      r0.extend(BoneMeasurements3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boneMeasurements][start_index] = r0

    r0
  end

  module Measurement0
    def name
      elements[0]
    end

    def number
      elements[4]
    end
  end

  def _nt_measurement
    start_index = index
    if node_cache[:measurement].has_key?(index)
      cached = node_cache[:measurement][index]
      if cached
        node_cache[:measurement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if (match_len = has_terminal?("=", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"="')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            r7 = _nt_number
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MeasurementNode,input, i0...index, s0)
      r0.extend(Measurement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:measurement][start_index] = r0

    r0
  end

end

class MyGrammarParser < Treetop::Runtime::CompiledParser
  include MyGrammar
end

