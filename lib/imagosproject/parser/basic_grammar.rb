# Autogenerated from a Treetop grammar. Edits may be lost.


 # Test for keyword vs name difference

module MyGrammar
  include Treetop::Runtime

  def root
    @root ||= :root
  end

  module Root0
    def statement
      elements[1]
    end
  end

  module Root1
  end

  def _nt_root
    start_index = index
    if node_cache[:root].has_key?(index)
      cached = node_cache[:root][index]
      if cached
        node_cache[:root][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        r4 = _nt_statement
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
      if r3
        s5, i5 = [], index
        loop do
          i6, s6 = index, []
          s7, i7 = [], index
          loop do
            r8 = _nt_space
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          s6 << r7
          if r7
            r9 = _nt_statement
            s6 << r9
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(Root0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
        if r5
          s10, i10 = [], index
          loop do
            r11 = _nt_space
            if r11
              s10 << r11
            else
              break
            end
          end
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          s0 << r10
        end
      end
    end
    if s0.last
      r0 = instantiate_node(RootNode,input, i0...index, s0)
      r0.extend(Root1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:root][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if (match_len = has_terminal?("\n", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('"\\n"')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if (match_len = has_terminal?(" ", false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('" "')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          if (match_len = has_terminal?("\t", false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('"\\t"')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            if (match_len = has_terminal?("\r", false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('"\\r"')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              if (match_len = has_terminal?("\f", false, index))
                r6 = true
                @index += match_len
              else
                terminal_parse_failure('"\\f"')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                if (match_len = has_terminal?("\v", false, index))
                  r7 = true
                  @index += match_len
                else
                  terminal_parse_failure('"\\v"')
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SpaceNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        node_cache[:name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z]')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(NameLiteralNode,input, i0...index, s0)
    end

    node_cache[:name][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        node_cache[:number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("-", false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('"-"')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r4 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s0 << r3
      if r3
        i6, s6 = index, []
        if (match_len = has_terminal?(".", false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('"."')
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
              r9 = true
              @index += 1
            else
              terminal_parse_failure('[0-9]')
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          if s8.empty?
            @index = i8
            r8 = nil
          else
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          end
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Number0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(NumberNode,input, i0...index, s0)
      r0.extend(Number1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module String0
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        node_cache[:string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("\"", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"\\""')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        r4 = _nt_name
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r3 = r4
        else
          r5 = _nt_space
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?("\"", false, index))
          r6 = true
          @index += match_len
        else
          terminal_parse_failure('"\\""')
          r6 = nil
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(StringNode,input, i0...index, s0)
      r0.extend(String0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  module Statement0
  end

  module Statement1
  end

  module Statement2
  end

  module Statement3
  end

  module Statement4
    def name1
      elements[3]
    end

    def name2
      elements[9]
    end

  end

  module Statement5
  end

  module Statement6
  end

  module Statement7
  end

  module Statement8
  end

  module Statement9
    def name1
      elements[3]
    end

    def name2
      elements[11]
    end

  end

  module Statement10
  end

  module Statement11
    def name
      elements[4]
    end

  end

  module Statement12
  end

  module Statement13
  end

  module Statement14
  end

  module Statement15
  end

  module Statement16
  end

  module Statement17
    def name1
      elements[9]
    end

    def name2
      elements[18]
    end

  end

  module Statement18
  end

  module Statement19
  end

  module Statement20
  end

  module Statement21
    def name
      elements[2]
    end

    def number
      elements[6]
    end

  end

  module Statement22
    def number
      elements[2]
    end

    def name
      elements[6]
    end

  end

  module Statement23
    def name
      elements[6]
    end

  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        node_cache[:statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?("DEFINE", false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"DEFINE"')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        r4 = _nt_space
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
      if r3
        i6, s6 = index, []
        i7 = index
        if (match_len = has_terminal?("AN", false, index))
          r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"AN"')
          r8 = nil
        end
        if r8
          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
          r7 = r8
        else
          if (match_len = has_terminal?("A", false, index))
            r9 = true
            @index += match_len
          else
            terminal_parse_failure('"A"')
            r9 = nil
          end
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r7 = r9
          else
            @index = i7
            r7 = nil
          end
        end
        s6 << r7
        if r7
          s10, i10 = [], index
          loop do
            r11 = _nt_space
            if r11
              s10 << r11
            else
              break
            end
          end
          if s10.empty?
            @index = i10
            r10 = nil
          else
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          end
          s6 << r10
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Statement0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          r12 = _nt_name
          s1 << r12
          if r12
            s13, i13 = [], index
            loop do
              r14 = _nt_space
              if r14
                s13 << r14
              else
                break
              end
            end
            if s13.empty?
              @index = i13
              r13 = nil
            else
              r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            end
            s1 << r13
            if r13
              if (match_len = has_terminal?("ATLAS", false, index))
                r15 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"ATLAS"')
                r15 = nil
              end
              s1 << r15
              if r15
                s16, i16 = [], index
                loop do
                  r17 = _nt_space
                  if r17
                    s16 << r17
                  else
                    break
                  end
                end
                if s16.empty?
                  @index = i16
                  r16 = nil
                else
                  r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                end
                s1 << r16
                if r16
                  if (match_len = has_terminal?("NAMED", false, index))
                    r18 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"NAMED"')
                    r18 = nil
                  end
                  s1 << r18
                  if r18
                    s19, i19 = [], index
                    loop do
                      r20 = _nt_space
                      if r20
                        s19 << r20
                      else
                        break
                      end
                    end
                    if s19.empty?
                      @index = i19
                      r19 = nil
                    else
                      r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                    end
                    s1 << r19
                    if r19
                      r21 = _nt_name
                      s1 << r21
                      if r21
                        s22, i22 = [], index
                        loop do
                          r23 = _nt_space
                          if r23
                            s22 << r23
                          else
                            break
                          end
                        end
                        if s22.empty?
                          @index = i22
                          r22 = nil
                        else
                          r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                        end
                        s1 << r22
                        if r22
                          if (match_len = has_terminal?("WITH", false, index))
                            r24 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"WITH"')
                            r24 = nil
                          end
                          s1 << r24
                          if r24
                            s25, i25 = [], index
                            loop do
                              r26 = _nt_space
                              if r26
                                s25 << r26
                              else
                                break
                              end
                            end
                            if s25.empty?
                              @index = i25
                              r25 = nil
                            else
                              r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                            end
                            s1 << r25
                            if r25
                              i28, s28 = index, []
                              if (match_len = has_terminal?("THE", false, index))
                                r29 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('"THE"')
                                r29 = nil
                              end
                              s28 << r29
                              if r29
                                s30, i30 = [], index
                                loop do
                                  r31 = _nt_space
                                  if r31
                                    s30 << r31
                                  else
                                    break
                                  end
                                end
                                if s30.empty?
                                  @index = i30
                                  r30 = nil
                                else
                                  r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                end
                                s28 << r30
                              end
                              if s28.last
                                r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                                r28.extend(Statement1)
                              else
                                @index = i28
                                r28 = nil
                              end
                              if r28
                                r27 = r28
                              else
                                r27 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s1 << r27
                              if r27
                                i33, s33 = index, []
                                if (match_len = has_terminal?("FOLLOWING", false, index))
                                  r34 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('"FOLLOWING"')
                                  r34 = nil
                                end
                                s33 << r34
                                if r34
                                  s35, i35 = [], index
                                  loop do
                                    r36 = _nt_space
                                    if r36
                                      s35 << r36
                                    else
                                      break
                                    end
                                  end
                                  if s35.empty?
                                    @index = i35
                                    r35 = nil
                                  else
                                    r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                                  end
                                  s33 << r35
                                end
                                if s33.last
                                  r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                                  r33.extend(Statement2)
                                else
                                  @index = i33
                                  r33 = nil
                                end
                                if r33
                                  r32 = r33
                                else
                                  r32 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s1 << r32
                                if r32
                                  i38, s38 = index, []
                                  if (match_len = has_terminal?("RADIOGRAPHIES", false, index))
                                    r39 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                    @index += match_len
                                  else
                                    terminal_parse_failure('"RADIOGRAPHIES"')
                                    r39 = nil
                                  end
                                  s38 << r39
                                  if r39
                                    s40, i40 = [], index
                                    loop do
                                      r41 = _nt_space
                                      if r41
                                        s40 << r41
                                      else
                                        break
                                      end
                                    end
                                    if s40.empty?
                                      @index = i40
                                      r40 = nil
                                    else
                                      r40 = instantiate_node(SyntaxNode,input, i40...index, s40)
                                    end
                                    s38 << r40
                                  end
                                  if s38.last
                                    r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                                    r38.extend(Statement3)
                                  else
                                    @index = i38
                                    r38 = nil
                                  end
                                  if r38
                                    r37 = r38
                                  else
                                    r37 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s1 << r37
                                  if r37
                                    s42, i42 = [], index
                                    loop do
                                      r43 = _nt_atlasRadiographyDefinition
                                      if r43
                                        s42 << r43
                                      else
                                        break
                                      end
                                    end
                                    if s42.empty?
                                      @index = i42
                                      r42 = nil
                                    else
                                      r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                    end
                                    s1 << r42
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(DefineAtlasNode,input, i1...index, s1)
      r1.extend(Statement4)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i44, s44 = index, []
      if (match_len = has_terminal?("DEFINE", false, index))
        r45 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"DEFINE"')
        r45 = nil
      end
      s44 << r45
      if r45
        s46, i46 = [], index
        loop do
          r47 = _nt_space
          if r47
            s46 << r47
          else
            break
          end
        end
        if s46.empty?
          @index = i46
          r46 = nil
        else
          r46 = instantiate_node(SyntaxNode,input, i46...index, s46)
        end
        s44 << r46
        if r46
          i49, s49 = index, []
          i50 = index
          if (match_len = has_terminal?("AN", false, index))
            r51 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"AN"')
            r51 = nil
          end
          if r51
            r51 = SyntaxNode.new(input, (index-1)...index) if r51 == true
            r50 = r51
          else
            if (match_len = has_terminal?("A", false, index))
              r52 = true
              @index += match_len
            else
              terminal_parse_failure('"A"')
              r52 = nil
            end
            if r52
              r52 = SyntaxNode.new(input, (index-1)...index) if r52 == true
              r50 = r52
            else
              @index = i50
              r50 = nil
            end
          end
          s49 << r50
          if r50
            s53, i53 = [], index
            loop do
              r54 = _nt_space
              if r54
                s53 << r54
              else
                break
              end
            end
            if s53.empty?
              @index = i53
              r53 = nil
            else
              r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
            end
            s49 << r53
          end
          if s49.last
            r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
            r49.extend(Statement5)
          else
            @index = i49
            r49 = nil
          end
          if r49
            r48 = r49
          else
            r48 = instantiate_node(SyntaxNode,input, index...index)
          end
          s44 << r48
          if r48
            r55 = _nt_name
            s44 << r55
            if r55
              s56, i56 = [], index
              loop do
                r57 = _nt_space
                if r57
                  s56 << r57
                else
                  break
                end
              end
              if s56.empty?
                @index = i56
                r56 = nil
              else
                r56 = instantiate_node(SyntaxNode,input, i56...index, s56)
              end
              s44 << r56
              if r56
                if (match_len = has_terminal?("SCORING", false, index))
                  r58 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('"SCORING"')
                  r58 = nil
                end
                s44 << r58
                if r58
                  s59, i59 = [], index
                  loop do
                    r60 = _nt_space
                    if r60
                      s59 << r60
                    else
                      break
                    end
                  end
                  if s59.empty?
                    @index = i59
                    r59 = nil
                  else
                    r59 = instantiate_node(SyntaxNode,input, i59...index, s59)
                  end
                  s44 << r59
                  if r59
                    if (match_len = has_terminal?("SYSTEM", false, index))
                      r61 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('"SYSTEM"')
                      r61 = nil
                    end
                    s44 << r61
                    if r61
                      s62, i62 = [], index
                      loop do
                        r63 = _nt_space
                        if r63
                          s62 << r63
                        else
                          break
                        end
                      end
                      if s62.empty?
                        @index = i62
                        r62 = nil
                      else
                        r62 = instantiate_node(SyntaxNode,input, i62...index, s62)
                      end
                      s44 << r62
                      if r62
                        if (match_len = has_terminal?("NAMED", false, index))
                          r64 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('"NAMED"')
                          r64 = nil
                        end
                        s44 << r64
                        if r64
                          s65, i65 = [], index
                          loop do
                            r66 = _nt_space
                            if r66
                              s65 << r66
                            else
                              break
                            end
                          end
                          if s65.empty?
                            @index = i65
                            r65 = nil
                          else
                            r65 = instantiate_node(SyntaxNode,input, i65...index, s65)
                          end
                          s44 << r65
                          if r65
                            r67 = _nt_name
                            s44 << r67
                            if r67
                              s68, i68 = [], index
                              loop do
                                r69 = _nt_space
                                if r69
                                  s68 << r69
                                else
                                  break
                                end
                              end
                              if s68.empty?
                                @index = i68
                                r68 = nil
                              else
                                r68 = instantiate_node(SyntaxNode,input, i68...index, s68)
                              end
                              s44 << r68
                              if r68
                                if (match_len = has_terminal?("WITH", false, index))
                                  r70 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('"WITH"')
                                  r70 = nil
                                end
                                s44 << r70
                                if r70
                                  s71, i71 = [], index
                                  loop do
                                    r72 = _nt_space
                                    if r72
                                      s71 << r72
                                    else
                                      break
                                    end
                                  end
                                  if s71.empty?
                                    @index = i71
                                    r71 = nil
                                  else
                                    r71 = instantiate_node(SyntaxNode,input, i71...index, s71)
                                  end
                                  s44 << r71
                                  if r71
                                    i74, s74 = index, []
                                    if (match_len = has_terminal?("THE", false, index))
                                      r75 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"THE"')
                                      r75 = nil
                                    end
                                    s74 << r75
                                    if r75
                                      s76, i76 = [], index
                                      loop do
                                        r77 = _nt_space
                                        if r77
                                          s76 << r77
                                        else
                                          break
                                        end
                                      end
                                      if s76.empty?
                                        @index = i76
                                        r76 = nil
                                      else
                                        r76 = instantiate_node(SyntaxNode,input, i76...index, s76)
                                      end
                                      s74 << r76
                                    end
                                    if s74.last
                                      r74 = instantiate_node(SyntaxNode,input, i74...index, s74)
                                      r74.extend(Statement6)
                                    else
                                      @index = i74
                                      r74 = nil
                                    end
                                    if r74
                                      r73 = r74
                                    else
                                      r73 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s44 << r73
                                    if r73
                                      i79, s79 = index, []
                                      if (match_len = has_terminal?("FOLLOWING", false, index))
                                        r80 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                        @index += match_len
                                      else
                                        terminal_parse_failure('"FOLLOWING"')
                                        r80 = nil
                                      end
                                      s79 << r80
                                      if r80
                                        s81, i81 = [], index
                                        loop do
                                          r82 = _nt_space
                                          if r82
                                            s81 << r82
                                          else
                                            break
                                          end
                                        end
                                        if s81.empty?
                                          @index = i81
                                          r81 = nil
                                        else
                                          r81 = instantiate_node(SyntaxNode,input, i81...index, s81)
                                        end
                                        s79 << r81
                                      end
                                      if s79.last
                                        r79 = instantiate_node(SyntaxNode,input, i79...index, s79)
                                        r79.extend(Statement7)
                                      else
                                        @index = i79
                                        r79 = nil
                                      end
                                      if r79
                                        r78 = r79
                                      else
                                        r78 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s44 << r78
                                      if r78
                                        i84, s84 = index, []
                                        if (match_len = has_terminal?("REGIONS", false, index))
                                          r85 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                          @index += match_len
                                        else
                                          terminal_parse_failure('"REGIONS"')
                                          r85 = nil
                                        end
                                        s84 << r85
                                        if r85
                                          s86, i86 = [], index
                                          loop do
                                            r87 = _nt_space
                                            if r87
                                              s86 << r87
                                            else
                                              break
                                            end
                                          end
                                          if s86.empty?
                                            @index = i86
                                            r86 = nil
                                          else
                                            r86 = instantiate_node(SyntaxNode,input, i86...index, s86)
                                          end
                                          s84 << r86
                                          if r86
                                            if (match_len = has_terminal?("OF", false, index))
                                              r88 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                              @index += match_len
                                            else
                                              terminal_parse_failure('"OF"')
                                              r88 = nil
                                            end
                                            s84 << r88
                                            if r88
                                              s89, i89 = [], index
                                              loop do
                                                r90 = _nt_space
                                                if r90
                                                  s89 << r90
                                                else
                                                  break
                                                end
                                              end
                                              if s89.empty?
                                                @index = i89
                                                r89 = nil
                                              else
                                                r89 = instantiate_node(SyntaxNode,input, i89...index, s89)
                                              end
                                              s84 << r89
                                              if r89
                                                if (match_len = has_terminal?("INTEREST", false, index))
                                                  r91 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                  @index += match_len
                                                else
                                                  terminal_parse_failure('"INTEREST"')
                                                  r91 = nil
                                                end
                                                s84 << r91
                                                if r91
                                                  s92, i92 = [], index
                                                  loop do
                                                    r93 = _nt_space
                                                    if r93
                                                      s92 << r93
                                                    else
                                                      break
                                                    end
                                                  end
                                                  if s92.empty?
                                                    @index = i92
                                                    r92 = nil
                                                  else
                                                    r92 = instantiate_node(SyntaxNode,input, i92...index, s92)
                                                  end
                                                  s84 << r92
                                                end
                                              end
                                            end
                                          end
                                        end
                                        if s84.last
                                          r84 = instantiate_node(SyntaxNode,input, i84...index, s84)
                                          r84.extend(Statement8)
                                        else
                                          @index = i84
                                          r84 = nil
                                        end
                                        if r84
                                          r83 = r84
                                        else
                                          r83 = instantiate_node(SyntaxNode,input, index...index)
                                        end
                                        s44 << r83
                                        if r83
                                          s94, i94 = [], index
                                          loop do
                                            r95 = _nt_roiDefinition
                                            if r95
                                              s94 << r95
                                            else
                                              break
                                            end
                                          end
                                          if s94.empty?
                                            @index = i94
                                            r94 = nil
                                          else
                                            r94 = instantiate_node(SyntaxNode,input, i94...index, s94)
                                          end
                                          s44 << r94
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s44.last
        r44 = instantiate_node(DefineROINode,input, i44...index, s44)
        r44.extend(Statement9)
      else
        @index = i44
        r44 = nil
      end
      if r44
        r44 = SyntaxNode.new(input, (index-1)...index) if r44 == true
        r0 = r44
      else
        i96, s96 = index, []
        if (match_len = has_terminal?("COMPARE", false, index))
          r97 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"COMPARE"')
          r97 = nil
        end
        s96 << r97
        if r97
          s98, i98 = [], index
          loop do
            r99 = _nt_space
            if r99
              s98 << r99
            else
              break
            end
          end
          if s98.empty?
            @index = i98
            r98 = nil
          else
            r98 = instantiate_node(SyntaxNode,input, i98...index, s98)
          end
          s96 << r98
          if r98
            i101, s101 = index, []
            if (match_len = has_terminal?("THE", false, index))
              r102 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('"THE"')
              r102 = nil
            end
            s101 << r102
            if r102
              s103, i103 = [], index
              loop do
                r104 = _nt_space
                if r104
                  s103 << r104
                else
                  break
                end
              end
              if s103.empty?
                @index = i103
                r103 = nil
              else
                r103 = instantiate_node(SyntaxNode,input, i103...index, s103)
              end
              s101 << r103
            end
            if s101.last
              r101 = instantiate_node(SyntaxNode,input, i101...index, s101)
              r101.extend(Statement10)
            else
              @index = i101
              r101 = nil
            end
            if r101
              r100 = r101
            else
              r100 = instantiate_node(SyntaxNode,input, index...index)
            end
            s96 << r100
            if r100
              if (match_len = has_terminal?("RADIOGRAPHY", false, index))
                r105 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"RADIOGRAPHY"')
                r105 = nil
              end
              s96 << r105
              if r105
                s106, i106 = [], index
                loop do
                  r107 = _nt_space
                  if r107
                    s106 << r107
                  else
                    break
                  end
                end
                if s106.empty?
                  @index = i106
                  r106 = nil
                else
                  r106 = instantiate_node(SyntaxNode,input, i106...index, s106)
                end
                s96 << r106
                if r106
                  i109, s109 = index, []
                  if (match_len = has_terminal?("OBSERVED", false, index))
                    r110 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"OBSERVED"')
                    r110 = nil
                  end
                  s109 << r110
                  if r110
                    s111, i111 = [], index
                    loop do
                      r112 = _nt_space
                      if r112
                        s111 << r112
                      else
                        break
                      end
                    end
                    if s111.empty?
                      @index = i111
                      r111 = nil
                    else
                      r111 = instantiate_node(SyntaxNode,input, i111...index, s111)
                    end
                    s109 << r111
                    if r111
                      if (match_len = has_terminal?("BY", false, index))
                        r113 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('"BY"')
                        r113 = nil
                      end
                      s109 << r113
                      if r113
                        s114, i114 = [], index
                        loop do
                          r115 = _nt_space
                          if r115
                            s114 << r115
                          else
                            break
                          end
                        end
                        if s114.empty?
                          @index = i114
                          r114 = nil
                        else
                          r114 = instantiate_node(SyntaxNode,input, i114...index, s114)
                        end
                        s109 << r114
                        if r114
                          r116 = _nt_name
                          s109 << r116
                          if r116
                            s117, i117 = [], index
                            loop do
                              r118 = _nt_space
                              if r118
                                s117 << r118
                              else
                                break
                              end
                            end
                            if s117.empty?
                              @index = i117
                              r117 = nil
                            else
                              r117 = instantiate_node(SyntaxNode,input, i117...index, s117)
                            end
                            s109 << r117
                          end
                        end
                      end
                    end
                  end
                  if s109.last
                    r109 = instantiate_node(SyntaxNode,input, i109...index, s109)
                    r109.extend(Statement11)
                  else
                    @index = i109
                    r109 = nil
                  end
                  if r109
                    r108 = r109
                  else
                    r108 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s96 << r108
                  if r108
                    if (match_len = has_terminal?("USING", false, index))
                      r119 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('"USING"')
                      r119 = nil
                    end
                    s96 << r119
                    if r119
                      s120, i120 = [], index
                      loop do
                        r121 = _nt_space
                        if r121
                          s120 << r121
                        else
                          break
                        end
                      end
                      if s120.empty?
                        @index = i120
                        r120 = nil
                      else
                        r120 = instantiate_node(SyntaxNode,input, i120...index, s120)
                      end
                      s96 << r120
                      if r120
                        i123, s123 = index, []
                        if (match_len = has_terminal?("THE", false, index))
                          r124 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('"THE"')
                          r124 = nil
                        end
                        s123 << r124
                        if r124
                          s125, i125 = [], index
                          loop do
                            r126 = _nt_space
                            if r126
                              s125 << r126
                            else
                              break
                            end
                          end
                          if s125.empty?
                            @index = i125
                            r125 = nil
                          else
                            r125 = instantiate_node(SyntaxNode,input, i125...index, s125)
                          end
                          s123 << r125
                        end
                        if s123.last
                          r123 = instantiate_node(SyntaxNode,input, i123...index, s123)
                          r123.extend(Statement12)
                        else
                          @index = i123
                          r123 = nil
                        end
                        if r123
                          r122 = r123
                        else
                          r122 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s96 << r122
                        if r122
                          r127 = _nt_name
                          s96 << r127
                          if r127
                            s128, i128 = [], index
                            loop do
                              r129 = _nt_space
                              if r129
                                s128 << r129
                              else
                                break
                              end
                            end
                            if s128.empty?
                              @index = i128
                              r128 = nil
                            else
                              r128 = instantiate_node(SyntaxNode,input, i128...index, s128)
                            end
                            s96 << r128
                            if r128
                              i130 = index
                              i131, s131 = index, []
                              if (match_len = has_terminal?("ATLAS", false, index))
                                r132 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('"ATLAS"')
                                r132 = nil
                              end
                              s131 << r132
                              if r132
                                s133, i133 = [], index
                                loop do
                                  r134 = _nt_space
                                  if r134
                                    s133 << r134
                                  else
                                    break
                                  end
                                end
                                if s133.empty?
                                  @index = i133
                                  r133 = nil
                                else
                                  r133 = instantiate_node(SyntaxNode,input, i133...index, s133)
                                end
                                s131 << r133
                              end
                              if s131.last
                                r131 = instantiate_node(SyntaxNode,input, i131...index, s131)
                                r131.extend(Statement13)
                              else
                                @index = i131
                                r131 = nil
                              end
                              if r131
                                r131 = SyntaxNode.new(input, (index-1)...index) if r131 == true
                                r130 = r131
                              else
                                i135, s135 = index, []
                                if (match_len = has_terminal?("SCORING", false, index))
                                  r136 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('"SCORING"')
                                  r136 = nil
                                end
                                s135 << r136
                                if r136
                                  s137, i137 = [], index
                                  loop do
                                    r138 = _nt_space
                                    if r138
                                      s137 << r138
                                    else
                                      break
                                    end
                                  end
                                  if s137.empty?
                                    @index = i137
                                    r137 = nil
                                  else
                                    r137 = instantiate_node(SyntaxNode,input, i137...index, s137)
                                  end
                                  s135 << r137
                                  if r137
                                    if (match_len = has_terminal?("SYSTEM", false, index))
                                      r139 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"SYSTEM"')
                                      r139 = nil
                                    end
                                    s135 << r139
                                    if r139
                                      s140, i140 = [], index
                                      loop do
                                        r141 = _nt_space
                                        if r141
                                          s140 << r141
                                        else
                                          break
                                        end
                                      end
                                      if s140.empty?
                                        @index = i140
                                        r140 = nil
                                      else
                                        r140 = instantiate_node(SyntaxNode,input, i140...index, s140)
                                      end
                                      s135 << r140
                                      if r140
                                        if (match_len = has_terminal?("BY", false, index))
                                          r142 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                          @index += match_len
                                        else
                                          terminal_parse_failure('"BY"')
                                          r142 = nil
                                        end
                                        s135 << r142
                                        if r142
                                          s143, i143 = [], index
                                          loop do
                                            r144 = _nt_space
                                            if r144
                                              s143 << r144
                                            else
                                              break
                                            end
                                          end
                                          if s143.empty?
                                            @index = i143
                                            r143 = nil
                                          else
                                            r143 = instantiate_node(SyntaxNode,input, i143...index, s143)
                                          end
                                          s135 << r143
                                          if r143
                                            i145 = index
                                            i146, s146 = index, []
                                            if (match_len = has_terminal?("MEAN", false, index))
                                              r147 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                              @index += match_len
                                            else
                                              terminal_parse_failure('"MEAN"')
                                              r147 = nil
                                            end
                                            s146 << r147
                                            if r147
                                              s148, i148 = [], index
                                              loop do
                                                r149 = _nt_space
                                                if r149
                                                  s148 << r149
                                                else
                                                  break
                                                end
                                              end
                                              if s148.empty?
                                                @index = i148
                                                r148 = nil
                                              else
                                                r148 = instantiate_node(SyntaxNode,input, i148...index, s148)
                                              end
                                              s146 << r148
                                            end
                                            if s146.last
                                              r146 = instantiate_node(SyntaxNode,input, i146...index, s146)
                                              r146.extend(Statement14)
                                            else
                                              @index = i146
                                              r146 = nil
                                            end
                                            if r146
                                              r146 = SyntaxNode.new(input, (index-1)...index) if r146 == true
                                              r145 = r146
                                            else
                                              i150, s150 = index, []
                                              if (match_len = has_terminal?("SUM", false, index))
                                                r151 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                @index += match_len
                                              else
                                                terminal_parse_failure('"SUM"')
                                                r151 = nil
                                              end
                                              s150 << r151
                                              if r151
                                                s152, i152 = [], index
                                                loop do
                                                  r153 = _nt_space
                                                  if r153
                                                    s152 << r153
                                                  else
                                                    break
                                                  end
                                                end
                                                if s152.empty?
                                                  @index = i152
                                                  r152 = nil
                                                else
                                                  r152 = instantiate_node(SyntaxNode,input, i152...index, s152)
                                                end
                                                s150 << r152
                                              end
                                              if s150.last
                                                r150 = instantiate_node(SyntaxNode,input, i150...index, s150)
                                                r150.extend(Statement15)
                                              else
                                                @index = i150
                                                r150 = nil
                                              end
                                              if r150
                                                r150 = SyntaxNode.new(input, (index-1)...index) if r150 == true
                                                r145 = r150
                                              else
                                                @index = i145
                                                r145 = nil
                                              end
                                            end
                                            s135 << r145
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                                if s135.last
                                  r135 = instantiate_node(SyntaxNode,input, i135...index, s135)
                                  r135.extend(Statement16)
                                else
                                  @index = i135
                                  r135 = nil
                                end
                                if r135
                                  r135 = SyntaxNode.new(input, (index-1)...index) if r135 == true
                                  r130 = r135
                                else
                                  @index = i130
                                  r130 = nil
                                end
                              end
                              s96 << r130
                              if r130
                                if (match_len = has_terminal?("STARTING", false, index))
                                  r154 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                  @index += match_len
                                else
                                  terminal_parse_failure('"STARTING"')
                                  r154 = nil
                                end
                                s96 << r154
                                if r154
                                  s155, i155 = [], index
                                  loop do
                                    r156 = _nt_space
                                    if r156
                                      s155 << r156
                                    else
                                      break
                                    end
                                  end
                                  if s155.empty?
                                    @index = i155
                                    r155 = nil
                                  else
                                    r155 = instantiate_node(SyntaxNode,input, i155...index, s155)
                                  end
                                  s96 << r155
                                  if r155
                                    if (match_len = has_terminal?("WITH", false, index))
                                      r157 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"WITH"')
                                      r157 = nil
                                    end
                                    s96 << r157
                                    if r157
                                      s158, i158 = [], index
                                      loop do
                                        r159 = _nt_space
                                        if r159
                                          s158 << r159
                                        else
                                          break
                                        end
                                      end
                                      if s158.empty?
                                        @index = i158
                                        r158 = nil
                                      else
                                        r158 = instantiate_node(SyntaxNode,input, i158...index, s158)
                                      end
                                      s96 << r158
                                      if r158
                                        if (match_len = has_terminal?("GENDER", false, index))
                                          r160 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                          @index += match_len
                                        else
                                          terminal_parse_failure('"GENDER"')
                                          r160 = nil
                                        end
                                        s96 << r160
                                        if r160
                                          s161, i161 = [], index
                                          loop do
                                            r162 = _nt_space
                                            if r162
                                              s161 << r162
                                            else
                                              break
                                            end
                                          end
                                          if s161.empty?
                                            @index = i161
                                            r161 = nil
                                          else
                                            r161 = instantiate_node(SyntaxNode,input, i161...index, s161)
                                          end
                                          s96 << r161
                                          if r161
                                            r163 = _nt_name
                                            s96 << r163
                                            if r163
                                              s164, i164 = [], index
                                              loop do
                                                r165 = _nt_space
                                                if r165
                                                  s164 << r165
                                                else
                                                  break
                                                end
                                              end
                                              if s164.empty?
                                                @index = i164
                                                r164 = nil
                                              else
                                                r164 = instantiate_node(SyntaxNode,input, i164...index, s164)
                                              end
                                              s96 << r164
                                              if r164
                                                if (match_len = has_terminal?("DEFINED", false, index))
                                                  r166 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                  @index += match_len
                                                else
                                                  terminal_parse_failure('"DEFINED"')
                                                  r166 = nil
                                                end
                                                s96 << r166
                                                if r166
                                                  s167, i167 = [], index
                                                  loop do
                                                    r168 = _nt_space
                                                    if r168
                                                      s167 << r168
                                                    else
                                                      break
                                                    end
                                                  end
                                                  if s167.empty?
                                                    @index = i167
                                                    r167 = nil
                                                  else
                                                    r167 = instantiate_node(SyntaxNode,input, i167...index, s167)
                                                  end
                                                  s96 << r167
                                                  if r167
                                                    if (match_len = has_terminal?("BY", false, index))
                                                      r169 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                                      @index += match_len
                                                    else
                                                      terminal_parse_failure('"BY"')
                                                      r169 = nil
                                                    end
                                                    s96 << r169
                                                    if r169
                                                      s170, i170 = [], index
                                                      loop do
                                                        r171 = _nt_space
                                                        if r171
                                                          s170 << r171
                                                        else
                                                          break
                                                        end
                                                      end
                                                      if s170.empty?
                                                        @index = i170
                                                        r170 = nil
                                                      else
                                                        r170 = instantiate_node(SyntaxNode,input, i170...index, s170)
                                                      end
                                                      s96 << r170
                                                      if r170
                                                        s172, i172 = [], index
                                                        loop do
                                                          r173 = _nt_boneMeasurements
                                                          if r173
                                                            s172 << r173
                                                          else
                                                            break
                                                          end
                                                        end
                                                        if s172.empty?
                                                          @index = i172
                                                          r172 = nil
                                                        else
                                                          r172 = instantiate_node(SyntaxNode,input, i172...index, s172)
                                                        end
                                                        s96 << r172
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s96.last
          r96 = instantiate_node(CompareRadiographyNode,input, i96...index, s96)
          r96.extend(Statement17)
        else
          @index = i96
          r96 = nil
        end
        if r96
          r96 = SyntaxNode.new(input, (index-1)...index) if r96 == true
          r0 = r96
        else
          i174, s174 = index, []
          if (match_len = has_terminal?("LOAD", false, index))
            r175 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"LOAD"')
            r175 = nil
          end
          s174 << r175
          if r175
            s176, i176 = [], index
            loop do
              r177 = _nt_space
              if r177
                s176 << r177
              else
                break
              end
            end
            if s176.empty?
              @index = i176
              r176 = nil
            else
              r176 = instantiate_node(SyntaxNode,input, i176...index, s176)
            end
            s174 << r176
            if r176
              i179, s179 = index, []
              if (match_len = has_terminal?("THE", false, index))
                r180 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"THE"')
                r180 = nil
              end
              s179 << r180
              if r180
                s181, i181 = [], index
                loop do
                  r182 = _nt_space
                  if r182
                    s181 << r182
                  else
                    break
                  end
                end
                if s181.empty?
                  @index = i181
                  r181 = nil
                else
                  r181 = instantiate_node(SyntaxNode,input, i181...index, s181)
                end
                s179 << r181
              end
              if s179.last
                r179 = instantiate_node(SyntaxNode,input, i179...index, s179)
                r179.extend(Statement18)
              else
                @index = i179
                r179 = nil
              end
              if r179
                r178 = r179
              else
                r178 = instantiate_node(SyntaxNode,input, index...index)
              end
              s174 << r178
              if r178
                i183 = index
                i184, s184 = index, []
                if (match_len = has_terminal?("ATLAS", false, index))
                  r185 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('"ATLAS"')
                  r185 = nil
                end
                s184 << r185
                if r185
                  s186, i186 = [], index
                  loop do
                    r187 = _nt_space
                    if r187
                      s186 << r187
                    else
                      break
                    end
                  end
                  if s186.empty?
                    @index = i186
                    r186 = nil
                  else
                    r186 = instantiate_node(SyntaxNode,input, i186...index, s186)
                  end
                  s184 << r186
                end
                if s184.last
                  r184 = instantiate_node(SyntaxNode,input, i184...index, s184)
                  r184.extend(Statement19)
                else
                  @index = i184
                  r184 = nil
                end
                if r184
                  r184 = SyntaxNode.new(input, (index-1)...index) if r184 == true
                  r183 = r184
                else
                  i188, s188 = index, []
                  if (match_len = has_terminal?("SCORING", false, index))
                    r189 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"SCORING"')
                    r189 = nil
                  end
                  s188 << r189
                  if r189
                    s190, i190 = [], index
                    loop do
                      r191 = _nt_space
                      if r191
                        s190 << r191
                      else
                        break
                      end
                    end
                    if s190.empty?
                      @index = i190
                      r190 = nil
                    else
                      r190 = instantiate_node(SyntaxNode,input, i190...index, s190)
                    end
                    s188 << r190
                    if r190
                      if (match_len = has_terminal?("SYSTEM", false, index))
                        r192 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('"SYSTEM"')
                        r192 = nil
                      end
                      s188 << r192
                    end
                  end
                  if s188.last
                    r188 = instantiate_node(SyntaxNode,input, i188...index, s188)
                    r188.extend(Statement20)
                  else
                    @index = i188
                    r188 = nil
                  end
                  if r188
                    r188 = SyntaxNode.new(input, (index-1)...index) if r188 == true
                    r183 = r188
                  else
                    @index = i183
                    r183 = nil
                  end
                end
                s174 << r183
                if r183
                  if (match_len = has_terminal?("NAMED", false, index))
                    r193 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"NAMED"')
                    r193 = nil
                  end
                  s174 << r193
                  if r193
                    s194, i194 = [], index
                    loop do
                      r195 = _nt_space
                      if r195
                        s194 << r195
                      else
                        break
                      end
                    end
                    if s194.empty?
                      @index = i194
                      r194 = nil
                    else
                      r194 = instantiate_node(SyntaxNode,input, i194...index, s194)
                    end
                    s174 << r194
                    if r194
                      r196 = _nt_name
                      s174 << r196
                      if r196
                        s197, i197 = [], index
                        loop do
                          r198 = _nt_space
                          if r198
                            s197 << r198
                          else
                            break
                          end
                        end
                        if s197.empty?
                          @index = i197
                          r197 = nil
                        else
                          r197 = instantiate_node(SyntaxNode,input, i197...index, s197)
                        end
                        s174 << r197
                        if r197
                          if (match_len = has_terminal?("STARTING", false, index))
                            r199 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"STARTING"')
                            r199 = nil
                          end
                          s174 << r199
                          if r199
                            s200, i200 = [], index
                            loop do
                              r201 = _nt_space
                              if r201
                                s200 << r201
                              else
                                break
                              end
                            end
                            if s200.empty?
                              @index = i200
                              r200 = nil
                            else
                              r200 = instantiate_node(SyntaxNode,input, i200...index, s200)
                            end
                            s174 << r200
                            if r200
                              if (match_len = has_terminal?("WITH", false, index))
                                r202 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('"WITH"')
                                r202 = nil
                              end
                              s174 << r202
                              if r202
                                s203, i203 = [], index
                                loop do
                                  r204 = _nt_space
                                  if r204
                                    s203 << r204
                                  else
                                    break
                                  end
                                end
                                if s203.empty?
                                  @index = i203
                                  r203 = nil
                                else
                                  r203 = instantiate_node(SyntaxNode,input, i203...index, s203)
                                end
                                s174 << r203
                                if r203
                                  i205 = index
                                  i206, s206 = index, []
                                  if (match_len = has_terminal?("GENDER", false, index))
                                    r207 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                    @index += match_len
                                  else
                                    terminal_parse_failure('"GENDER"')
                                    r207 = nil
                                  end
                                  s206 << r207
                                  if r207
                                    s208, i208 = [], index
                                    loop do
                                      r209 = _nt_space
                                      if r209
                                        s208 << r209
                                      else
                                        break
                                      end
                                    end
                                    if s208.empty?
                                      @index = i208
                                      r208 = nil
                                    else
                                      r208 = instantiate_node(SyntaxNode,input, i208...index, s208)
                                    end
                                    s206 << r208
                                    if r208
                                      r210 = _nt_name
                                      s206 << r210
                                      if r210
                                        s211, i211 = [], index
                                        loop do
                                          r212 = _nt_space
                                          if r212
                                            s211 << r212
                                          else
                                            break
                                          end
                                        end
                                        if s211.empty?
                                          @index = i211
                                          r211 = nil
                                        else
                                          r211 = instantiate_node(SyntaxNode,input, i211...index, s211)
                                        end
                                        s206 << r211
                                        if r211
                                          if (match_len = has_terminal?("AGE", false, index))
                                            r213 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                            @index += match_len
                                          else
                                            terminal_parse_failure('"AGE"')
                                            r213 = nil
                                          end
                                          s206 << r213
                                          if r213
                                            s214, i214 = [], index
                                            loop do
                                              r215 = _nt_space
                                              if r215
                                                s214 << r215
                                              else
                                                break
                                              end
                                            end
                                            if s214.empty?
                                              @index = i214
                                              r214 = nil
                                            else
                                              r214 = instantiate_node(SyntaxNode,input, i214...index, s214)
                                            end
                                            s206 << r214
                                            if r214
                                              r216 = _nt_number
                                              s206 << r216
                                              if r216
                                                s217, i217 = [], index
                                                loop do
                                                  r218 = _nt_space
                                                  if r218
                                                    s217 << r218
                                                  else
                                                    break
                                                  end
                                                end
                                                if s217.empty?
                                                  @index = i217
                                                  r217 = nil
                                                else
                                                  r217 = instantiate_node(SyntaxNode,input, i217...index, s217)
                                                end
                                                s206 << r217
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                  if s206.last
                                    r206 = instantiate_node(SyntaxNode,input, i206...index, s206)
                                    r206.extend(Statement21)
                                  else
                                    @index = i206
                                    r206 = nil
                                  end
                                  if r206
                                    r206 = SyntaxNode.new(input, (index-1)...index) if r206 == true
                                    r205 = r206
                                  else
                                    i219, s219 = index, []
                                    if (match_len = has_terminal?("AGE", false, index))
                                      r220 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"AGE"')
                                      r220 = nil
                                    end
                                    s219 << r220
                                    if r220
                                      s221, i221 = [], index
                                      loop do
                                        r222 = _nt_space
                                        if r222
                                          s221 << r222
                                        else
                                          break
                                        end
                                      end
                                      if s221.empty?
                                        @index = i221
                                        r221 = nil
                                      else
                                        r221 = instantiate_node(SyntaxNode,input, i221...index, s221)
                                      end
                                      s219 << r221
                                      if r221
                                        r223 = _nt_number
                                        s219 << r223
                                        if r223
                                          s224, i224 = [], index
                                          loop do
                                            r225 = _nt_space
                                            if r225
                                              s224 << r225
                                            else
                                              break
                                            end
                                          end
                                          if s224.empty?
                                            @index = i224
                                            r224 = nil
                                          else
                                            r224 = instantiate_node(SyntaxNode,input, i224...index, s224)
                                          end
                                          s219 << r224
                                          if r224
                                            if (match_len = has_terminal?("GENDER", false, index))
                                              r226 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                              @index += match_len
                                            else
                                              terminal_parse_failure('"GENDER"')
                                              r226 = nil
                                            end
                                            s219 << r226
                                            if r226
                                              s227, i227 = [], index
                                              loop do
                                                r228 = _nt_space
                                                if r228
                                                  s227 << r228
                                                else
                                                  break
                                                end
                                              end
                                              if s227.empty?
                                                @index = i227
                                                r227 = nil
                                              else
                                                r227 = instantiate_node(SyntaxNode,input, i227...index, s227)
                                              end
                                              s219 << r227
                                              if r227
                                                r229 = _nt_name
                                                s219 << r229
                                                if r229
                                                  s230, i230 = [], index
                                                  loop do
                                                    r231 = _nt_space
                                                    if r231
                                                      s230 << r231
                                                    else
                                                      break
                                                    end
                                                  end
                                                  if s230.empty?
                                                    @index = i230
                                                    r230 = nil
                                                  else
                                                    r230 = instantiate_node(SyntaxNode,input, i230...index, s230)
                                                  end
                                                  s219 << r230
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                    if s219.last
                                      r219 = instantiate_node(SyntaxNode,input, i219...index, s219)
                                      r219.extend(Statement22)
                                    else
                                      @index = i219
                                      r219 = nil
                                    end
                                    if r219
                                      r219 = SyntaxNode.new(input, (index-1)...index) if r219 == true
                                      r205 = r219
                                    else
                                      @index = i205
                                      r205 = nil
                                    end
                                  end
                                  s174 << r205
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          if s174.last
            r174 = instantiate_node(LoadNode,input, i174...index, s174)
            r174.extend(Statement23)
          else
            @index = i174
            r174 = nil
          end
          if r174
            r174 = SyntaxNode.new(input, (index-1)...index) if r174 == true
            r0 = r174
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module AtlasRadiographyDefinition0
    def binSelection
      elements[0]
    end

  end

  def _nt_atlasRadiographyDefinition
    start_index = index
    if node_cache[:atlasRadiographyDefinition].has_key?(index)
      cached = node_cache[:atlasRadiographyDefinition][index]
      if cached
        node_cache[:atlasRadiographyDefinition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_binSelection
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          r5 = _nt_boneMeasurements
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(AtlasRadiographyDefinitionNode,input, i0...index, s0)
      r0.extend(AtlasRadiographyDefinition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:atlasRadiographyDefinition][start_index] = r0

    r0
  end

  module BinSelection0
  end

  module BinSelection1
    def name
      elements[5]
    end

    def number
      elements[9]
    end

  end

  def _nt_binSelection
    start_index = index
    if node_cache[:binSelection].has_key?(index)
      cached = node_cache[:binSelection][index]
      if cached
        node_cache[:binSelection][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    if (match_len = has_terminal?("ONE", false, index))
      r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"ONE"')
      r3 = nil
    end
    s2 << r3
    if r3
      s4, i4 = [], index
      loop do
        r5 = _nt_space
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(BinSelection0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?("FOR", false, index))
        r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"FOR"')
        r6 = nil
      end
      s0 << r6
      if r6
        s7, i7 = [], index
        loop do
          r8 = _nt_space
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s0 << r7
        if r7
          if (match_len = has_terminal?("GENDER", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"GENDER"')
            r9 = nil
          end
          s0 << r9
          if r9
            s10, i10 = [], index
            loop do
              r11 = _nt_space
              if r11
                s10 << r11
              else
                break
              end
            end
            if s10.empty?
              @index = i10
              r10 = nil
            else
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            end
            s0 << r10
            if r10
              r12 = _nt_name
              s0 << r12
              if r12
                s13, i13 = [], index
                loop do
                  r14 = _nt_space
                  if r14
                    s13 << r14
                  else
                    break
                  end
                end
                if s13.empty?
                  @index = i13
                  r13 = nil
                else
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                end
                s0 << r13
                if r13
                  if (match_len = has_terminal?("AGE", false, index))
                    r15 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"AGE"')
                    r15 = nil
                  end
                  s0 << r15
                  if r15
                    s16, i16 = [], index
                    loop do
                      r17 = _nt_space
                      if r17
                        s16 << r17
                      else
                        break
                      end
                    end
                    if s16.empty?
                      @index = i16
                      r16 = nil
                    else
                      r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                    end
                    s0 << r16
                    if r16
                      r18 = _nt_number
                      s0 << r18
                      if r18
                        s19, i19 = [], index
                        loop do
                          r20 = _nt_space
                          if r20
                            s19 << r20
                          else
                            break
                          end
                        end
                        if s19.empty?
                          @index = i19
                          r19 = nil
                        else
                          r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                        end
                        s0 << r19
                        if r19
                          if (match_len = has_terminal?("WITH", false, index))
                            r21 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('"WITH"')
                            r21 = nil
                          end
                          s0 << r21
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BinSelectionNode,input, i0...index, s0)
      r0.extend(BinSelection1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:binSelection][start_index] = r0

    r0
  end

  module BoneMeasurements0
  end

  module BoneMeasurements1
  end

  module BoneMeasurements2
    def measurement
      elements[0]
    end

  end

  module BoneMeasurements3
    def name
      elements[1]
    end

  end

  def _nt_boneMeasurements
    start_index = index
    if node_cache[:boneMeasurements].has_key?(index)
      cached = node_cache[:boneMeasurements][index]
      if cached
        node_cache[:boneMeasurements][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    i3, s3 = index, []
    if (match_len = has_terminal?("A", false, index))
      r4 = true
      @index += match_len
    else
      terminal_parse_failure('"A"')
      r4 = nil
    end
    s3 << r4
    if r4
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(BoneMeasurements0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      i7, s7 = index, []
      if (match_len = has_terminal?("AN", false, index))
        r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"AN"')
        r8 = nil
      end
      s7 << r8
      if r8
        s9, i9 = [], index
        loop do
          r10 = _nt_space
          if r10
            s9 << r10
          else
            break
          end
        end
        if s9.empty?
          @index = i9
          r9 = nil
        else
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        end
        s7 << r9
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(BoneMeasurements1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
        r2 = r7
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r11 = _nt_name
      s0 << r11
      if r11
        s12, i12 = [], index
        loop do
          r13 = _nt_space
          if r13
            s12 << r13
          else
            break
          end
        end
        if s12.empty?
          @index = i12
          r12 = nil
        else
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
        end
        s0 << r12
        if r12
          if (match_len = has_terminal?("BONE", false, index))
            r14 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"BONE"')
            r14 = nil
          end
          s0 << r14
          if r14
            s15, i15 = [], index
            loop do
              r16 = _nt_space
              if r16
                s15 << r16
              else
                break
              end
            end
            if s15.empty?
              @index = i15
              r15 = nil
            else
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
            end
            s0 << r15
            if r15
              if (match_len = has_terminal?("OF", false, index))
                r17 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('"OF"')
                r17 = nil
              end
              s0 << r17
              if r17
                s18, i18 = [], index
                loop do
                  r19 = _nt_space
                  if r19
                    s18 << r19
                  else
                    break
                  end
                end
                if s18.empty?
                  @index = i18
                  r18 = nil
                else
                  r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                end
                s0 << r18
                if r18
                  if (match_len = has_terminal?("MEASUREMENTS", false, index))
                    r20 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"MEASUREMENTS"')
                    r20 = nil
                  end
                  s0 << r20
                  if r20
                    s21, i21 = [], index
                    loop do
                      r22 = _nt_space
                      if r22
                        s21 << r22
                      else
                        break
                      end
                    end
                    if s21.empty?
                      @index = i21
                      r21 = nil
                    else
                      r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                    end
                    s0 << r21
                    if r21
                      s23, i23 = [], index
                      loop do
                        i24, s24 = index, []
                        r25 = _nt_measurement
                        s24 << r25
                        if r25
                          s26, i26 = [], index
                          loop do
                            r27 = _nt_space
                            if r27
                              s26 << r27
                            else
                              break
                            end
                          end
                          if s26.empty?
                            @index = i26
                            r26 = nil
                          else
                            r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                          end
                          s24 << r26
                        end
                        if s24.last
                          r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                          r24.extend(BoneMeasurements2)
                        else
                          @index = i24
                          r24 = nil
                        end
                        if r24
                          s23 << r24
                        else
                          break
                        end
                      end
                      if s23.empty?
                        @index = i23
                        r23 = nil
                      else
                        r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                      end
                      s0 << r23
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BoneMeasurementsNode,input, i0...index, s0)
      r0.extend(BoneMeasurements3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boneMeasurements][start_index] = r0

    r0
  end

  module RoiDefinition0
    def roiMeta
      elements[0]
    end

    def boneList
      elements[1]
    end
  end

  def _nt_roiDefinition
    start_index = index
    if node_cache[:roiDefinition].has_key?(index)
      cached = node_cache[:roiDefinition][index]
      if cached
        node_cache[:roiDefinition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_roiMeta
    s0 << r1
    if r1
      r2 = _nt_boneList
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RoiDefinition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:roiDefinition][start_index] = r0

    r0
  end

  module RoiMeta0
  end

  module RoiMeta1
  end

  module RoiMeta2
    def string
      elements[5]
    end

    def number
      elements[11]
    end

  end

  def _nt_roiMeta
    start_index = index
    if node_cache[:roiMeta].has_key?(index)
      cached = node_cache[:roiMeta][index]
      if cached
        node_cache[:roiMeta][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    i3, s3 = index, []
    if (match_len = has_terminal?("ONE", false, index))
      r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"ONE"')
      r4 = nil
    end
    s3 << r4
    if r4
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s3 << r5
    end
    if s3.last
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      r3.extend(RoiMeta0)
    else
      @index = i3
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      i7, s7 = index, []
      if (match_len = has_terminal?("ANOTHER", false, index))
        r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"ANOTHER"')
        r8 = nil
      end
      s7 << r8
      if r8
        s9, i9 = [], index
        loop do
          r10 = _nt_space
          if r10
            s9 << r10
          else
            break
          end
        end
        if s9.empty?
          @index = i9
          r9 = nil
        else
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        end
        s7 << r9
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(RoiMeta1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
        r2 = r7
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?("DESCRIBED", false, index))
        r11 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"DESCRIBED"')
        r11 = nil
      end
      s0 << r11
      if r11
        s12, i12 = [], index
        loop do
          r13 = _nt_space
          if r13
            s12 << r13
          else
            break
          end
        end
        if s12.empty?
          @index = i12
          r12 = nil
        else
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
        end
        s0 << r12
        if r12
          if (match_len = has_terminal?("AS", false, index))
            r14 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"AS"')
            r14 = nil
          end
          s0 << r14
          if r14
            s15, i15 = [], index
            loop do
              r16 = _nt_space
              if r16
                s15 << r16
              else
                break
              end
            end
            if s15.empty?
              @index = i15
              r15 = nil
            else
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
            end
            s0 << r15
            if r15
              r17 = _nt_string
              s0 << r17
              if r17
                s18, i18 = [], index
                loop do
                  r19 = _nt_space
                  if r19
                    s18 << r19
                  else
                    break
                  end
                end
                if s18.empty?
                  @index = i18
                  r18 = nil
                else
                  r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                end
                s0 << r18
                if r18
                  if (match_len = has_terminal?("WITH", false, index))
                    r20 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('"WITH"')
                    r20 = nil
                  end
                  s0 << r20
                  if r20
                    s21, i21 = [], index
                    loop do
                      r22 = _nt_space
                      if r22
                        s21 << r22
                      else
                        break
                      end
                    end
                    if s21.empty?
                      @index = i21
                      r21 = nil
                    else
                      r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                    end
                    s0 << r21
                    if r21
                      if (match_len = has_terminal?("SCORE", false, index))
                        r23 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('"SCORE"')
                        r23 = nil
                      end
                      s0 << r23
                      if r23
                        s24, i24 = [], index
                        loop do
                          r25 = _nt_space
                          if r25
                            s24 << r25
                          else
                            break
                          end
                        end
                        if s24.empty?
                          @index = i24
                          r24 = nil
                        else
                          r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                        end
                        s0 << r24
                        if r24
                          r26 = _nt_number
                          s0 << r26
                          if r26
                            s27, i27 = [], index
                            loop do
                              r28 = _nt_space
                              if r28
                                s27 << r28
                              else
                                break
                              end
                            end
                            if s27.empty?
                              @index = i27
                              r27 = nil
                            else
                              r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                            end
                            s0 << r27
                            if r27
                              if (match_len = has_terminal?("COMPOSED", false, index))
                                r29 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                @index += match_len
                              else
                                terminal_parse_failure('"COMPOSED"')
                                r29 = nil
                              end
                              s0 << r29
                              if r29
                                s30, i30 = [], index
                                loop do
                                  r31 = _nt_space
                                  if r31
                                    s30 << r31
                                  else
                                    break
                                  end
                                end
                                if s30.empty?
                                  @index = i30
                                  r30 = nil
                                else
                                  r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                end
                                s0 << r30
                                if r30
                                  if (match_len = has_terminal?("OF", false, index))
                                    r32 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                                    @index += match_len
                                  else
                                    terminal_parse_failure('"OF"')
                                    r32 = nil
                                  end
                                  s0 << r32
                                  if r32
                                    s33, i33 = [], index
                                    loop do
                                      r34 = _nt_space
                                      if r34
                                        s33 << r34
                                      else
                                        break
                                      end
                                    end
                                    if s33.empty?
                                      @index = i33
                                      r33 = nil
                                    else
                                      r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                                    end
                                    s0 << r33
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ROIMetaNode,input, i0...index, s0)
      r0.extend(RoiMeta2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:roiMeta][start_index] = r0

    r0
  end

  module BoneList0
    def name
      elements[2]
    end

  end

  module BoneList1
    def name
      elements[0]
    end

  end

  def _nt_boneList
    start_index = index
    if node_cache[:boneList].has_key?(index)
      cached = node_cache[:boneList][index]
      if cached
        node_cache[:boneList][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          if (match_len = has_terminal?(",", false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('","')
            r6 = nil
          end
          s5 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s5 << r7
            if r7
              r9 = _nt_name
              s5 << r9
              if r9
                s10, i10 = [], index
                loop do
                  r11 = _nt_space
                  if r11
                    s10 << r11
                  else
                    break
                  end
                end
                if s10.empty?
                  @index = i10
                  r10 = nil
                else
                  r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                end
                s5 << r10
              end
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(BoneList0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(BoneListNode,input, i0...index, s0)
      r0.extend(BoneList1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boneList][start_index] = r0

    r0
  end

  module Measurement0
    def name
      elements[0]
    end

    def number
      elements[4]
    end
  end

  def _nt_measurement
    start_index = index
    if node_cache[:measurement].has_key?(index)
      cached = node_cache[:measurement][index]
      if cached
        node_cache[:measurement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if (match_len = has_terminal?("=", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('"="')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            r7 = _nt_number
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MeasurementNode,input, i0...index, s0)
      r0.extend(Measurement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:measurement][start_index] = r0

    r0
  end

end

class MyGrammarParser < Treetop::Runtime::CompiledParser
  include MyGrammar
end

