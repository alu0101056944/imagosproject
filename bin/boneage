#!/usr/bin/env ruby

require 'thor'
require 'treetop'

require_relative '../lib/imagosproject'
require_relative '../lib/imagosproject/parser/grammar_methods.rb'
require_relative '../lib/imagosproject/parser/basic_grammar.rb'

# Using thor package to create a proper CLI program
class BoneAgeCLI < Thor
  package_name 'BoneAge'

  # commands
  desc 'execute PATH', 'execute a DSL file at PATH'

  option :config, :aliases => "-c", :desc => "Configuration file path"

  # command implementation with it's parameters
  def execute(file_path)
    if options[:config]
      ImagosProject.loadConfig(options[:config])
    else
      ImagosProject.loadConfig()
    end

    begin
      puts "Executing file #{file_path}."
      if File.extname(file_path) === '.ae'
        puts "Detected second version sintaxis."

        parser = MyGrammarParser.new()
        result = parser.parse(File.read(file_path))

        if result
          execution_script = "DSLBoneAge.new do\n" + result.value + "\nend"
          eval(execution_script)
        else
          if ImagosProject.config['logging_level'] == 1
            puts 'Program failed to read the file, something is wrong in it\'s ' +
                'sintax.'
          else
            puts 'PARSER FAILURE.'
            puts 'Failure reason: ', parser.failure_reason
            puts 'Failure line: ', parser.failure_line
            puts 'Failure column: ', parser.failure_column
          end
        end
      else
        puts "Detected first version sintaxis."
        require(file_path)
      end
    rescue Exception => e
      if ImagosProject.config['logging_level'] == 1
        puts "ERROR encountered #{e.class}\n#{e.message}"
      else
        # puts "ERROR #{e.class}: #{e.message}\n#{e.backtrace}"
        raise e
      end
      puts 'Program to exit.'
    end
  end

  # required for the operating system to exit when something goes wrong.
  def self.exit_on_failure?
    true
  end
end

BoneAgeCLI.start(ARGV)
